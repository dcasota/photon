From 0da0152986f7d1e666aeb1317d18746250423575 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?V=C3=ADt=20Ondruch?= <vondruch@redhat.com>
Date: Thu, 31 Mar 2022 19:12:24 +0200
Subject: [PATCH] Properly install expanded gem extensions.

The expanded gem location changed from 'gem' to '.bundled/gems'
directory in commit:git|55bf0ef1aa7c936b564b883196de1ace4be4cc7e /
 #2922, leaving behind binary extension installation. This should fix
the issues, so the gem binary extensions are buildable as part of Ruby
build process again.
---
 ext/extmk.rb          | 13 ++++++-------
 template/exts.mk.tmpl |  4 ++--
 tool/rbinstall.rb     |  4 ++--
 3 files changed, 10 insertions(+), 11 deletions(-)

diff --git a/ext/extmk.rb b/ext/extmk.rb
index 4a087f294ac93..bc0e4f135d8e5 100755
--- a/ext/extmk.rb
+++ b/ext/extmk.rb
@@ -146,7 +146,7 @@ def extmake(target, basedir = 'ext', maybestatic = true)
     top_srcdir = $top_srcdir
     topdir = $topdir
     hdrdir = $hdrdir
-    prefix = "../" * (target.count("/")+1)
+    prefix = "../" * (target.count("/") + basedir.count("/"))
     $top_srcdir = relative_from(top_srcdir, prefix)
     $hdrdir = relative_from(hdrdir, prefix)
     $topdir = prefix + $topdir
@@ -461,15 +461,15 @@ def $mflags.defined?(var)
 
 @gemname = nil
 if ARGV[0]
-  ext_prefix, exts = ARGV.shift.split('/', 2)
+  ext_prefix, exts = File.split(ARGV.shift)
   $extension = [exts] if exts
-  if ext_prefix == 'gems'
+  if ext_prefix == '.bundle/gems'
     @gemname = exts
   elsif exts
     $static_ext.delete_if {|t, *| !File.fnmatch(t, exts)}
   end
 end
-ext_prefix = "#{$top_srcdir}/#{ext_prefix || 'ext'}"
+ext_prefix = "#{$top_srcdir}/#{ext_prefix || './ext'}"
 exts = $static_ext.sort_by {|t, i| i}.collect {|t, i| t}
 default_exclude_exts =
   case
@@ -515,7 +515,6 @@ def $mflags.defined?(var)
     exts.delete_if {|d| File.fnmatch?("-*", d)}
   end
 end
-ext_prefix = File.basename(ext_prefix)
 
 extend Module.new {
   def timestamp_file(name, target_prefix = nil)
@@ -534,7 +533,7 @@ def create_makefile(*args, &block)
     super(*args) do |conf|
       conf.find do |s|
         s.sub!(/^(TARGET_SO_DIR *= *)\$\(RUBYARCHDIR\)/) {
-          "TARGET_GEM_DIR = $(extout)/gems/$(arch)/#{@gemname}\n"\
+          "TARGET_GEM_DIR = $(extout)/.bundle/gems/$(arch)/#{@gemname}\n"\
           "#{$1}$(TARGET_GEM_DIR)$(target_prefix)"
         }
       end
@@ -634,7 +633,7 @@ def initialize(src)
   end
 }
 
-Dir.chdir ".."
+Dir.chdir dir
 unless $destdir.to_s.empty?
   $mflags.defined?("DESTDIR") or $mflags << "DESTDIR=#{$destdir}"
 end
diff --git a/template/exts.mk.tmpl b/template/exts.mk.tmpl
index 2f37f4480ac51..401ea9a497f38 100644
--- a/template/exts.mk.tmpl
+++ b/template/exts.mk.tmpl
@@ -19,13 +19,13 @@ opt = OptionParser.new do |o|
   o.on('--configure-exts=FILE') {|v| confexts = v}
   o.order!(ARGV)
 end
-confexts &&= File.read(confexts).scan(/^exts: (.*\.mk)/).flatten rescue nil
+confexts &&= File.read(confexts).scan(/^(exts|gems): (.*\.mk)/).collect {|i| i.last } rescue nil
 confexts ||= []
 macros["old_extensions"] = []
 
 contpat = /(?>(?>[^\\\n]|\\.)*\\\n)*(?>[^\\\n]|\\.)*/
 Dir.glob("{ext,.bundle/gems}/*/exts.mk") do |e|
-  gem = /\Agems(?=\/)/ =~ e
+  gem = /\A.bundle\/gems(?=\/)/ =~ e
   s = File.read(e)
   s.scan(/^(extensions|SUBMAKEOPTS|EXT[A-Z]+|MFLAGS|NOTE_[A-Z]+)[ \t]*=[ \t]*(#{contpat})$/o) do |n, v|
     v.gsub!(/\\\n[ \t]*/, ' ')
diff --git a/tool/rbinstall.rb b/tool/rbinstall.rb
index 9d9b672be4724..8c8a14193ec9b 100755
--- a/tool/rbinstall.rb
+++ b/tool/rbinstall.rb
@@ -1042,7 +1042,7 @@ def install_default_gem(dir, srcdir, bindir)
     :wrappers => true,
     :format_executable => true,
   }
-  gem_ext_dir = "#$extout/gems/#{CONFIG['arch']}"
+  gem_ext_dir = "#$extout/.bundle/gems/#{CONFIG['arch']}"
   extensions_dir = with_destdir(Gem::StubSpecification.gemspec_stub("", gem_dir, gem_dir).extensions_dir)
 
   File.foreach("#{srcdir}/gems/bundled_gems") do |name|
@@ -1075,7 +1075,7 @@ def install_default_gem(dir, srcdir, bindir)
       File.chmod($data_mode, File.join(install_dir, "specifications", "#{spec.full_name}.gemspec"))
     end
     unless spec.extensions.empty?
-      install_recursive(ext, spec.extension_dir)
+      install_recursive(ext, without_destdir(spec.extension_dir))
     end
     installed_gems[spec.full_name] = true
   end

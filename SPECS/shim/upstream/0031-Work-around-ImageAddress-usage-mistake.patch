From fd43edacfe1eaa64d1c7b37ba23dae74e05d1a04 Mon Sep 17 00:00:00 2001
From: Dennis Tseng <dennis.tseng@suse.com>
Date: Tue, 27 Jun 2023 21:41:19 +0800
Subject: [PATCH 31/35] Work around ImageAddress() usage mistake

In 569270d8603d68308ad8bf8ef4cad4b09101d35e, the PE loader's address
sanitizing function, ImageAddress(), was changed to match the intended
behavior and the accompanying test case.  Unfortunately, the PE
relocator uses this function to compute the last address in the
relocation directory, and as a result, any binary with a relocations
will trigger that edge condition and fail to load.

This patch changes that call to compute the address that's one byte
earlier.  The only things the computed value is used for are a) testing
that the relocation *section* is valid, and b) serving as a limit for
iterating the relocations.  Since a relocation is never less than two
bytes, this will still work.

[commit message re-written to be more informative by pjones]

Signed-off-by: Dennis Tseng <dennis.tseng@suse.com>
---
 pe-relocate.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/pe-relocate.c b/pe-relocate.c
index 6401114..9c8c5e3 100644
--- a/pe-relocate.c
+++ b/pe-relocate.c
@@ -75,7 +75,7 @@ relocate_coff (PE_COFF_LOADER_IMAGE_CONTEXT *context,
 	/* RelocBaseEnd here is the address of the first entry /past/ the
 	 * table.  */
 	RelocBaseEnd = ImageAddress(orig, size, Section->PointerToRawData +
-						context->RelocDir->Size);
+						context->RelocDir->Size - 1);
 
 	if (!RelocBase && !RelocBaseEnd)
 		return EFI_SUCCESS;
-- 
2.39.0


From cc8b3483a5584b3301e3d43d17eb59704857ffaa Mon Sep 17 00:00:00 2001
From: Protobuf Team Bot <protobuf-github-bot@google.com>
Date: Thu, 18 Jul 2024 07:41:01 -0700
Subject: [PATCH] Internal change

PiperOrigin-RevId: 653615736

[mukul.sikka: Backported to 3.23.3]
Signed-off-by: Mukul Sikka <mukul.sikka@broadcom.com>

---
 .../core/src/main/java/com/google/protobuf/ArrayDecoders.java | 3 +--
 .../com/google/protobuf/InvalidProtocolBufferException.java   | 2 +-
 .../core/src/main/java/com/google/protobuf/MessageSchema.java | 3 +++
 .../src/main/java/com/google/protobuf/MessageSetSchema.java   | 1 +
 .../src/main/java/com/google/protobuf/UnknownFieldSchema.java | 3 +--
 java/lite/src/test/java/com/google/protobuf/LiteTest.java     | 3 +++
 src/google/protobuf/unittest_lite.proto                       | 4 ++++
 7 files changed, 14 insertions(+), 5 deletions(-)

diff --git a/java/core/src/main/java/com/google/protobuf/ArrayDecoders.java b/java/core/src/main/java/com/google/protobuf/ArrayDecoders.java
index 183bbc2..855174f 100644
--- a/java/core/src/main/java/com/google/protobuf/ArrayDecoders.java
+++ b/java/core/src/main/java/com/google/protobuf/ArrayDecoders.java
@@ -47,8 +47,7 @@ import java.io.IOException;
 @CheckReturnValue
 final class ArrayDecoders {
 
-  private ArrayDecoders() {
-  }
+  private ArrayDecoders() {}
 
   /**
    * A helper used to return multiple values in a Java function. Java doesn't natively support
diff --git a/java/core/src/main/java/com/google/protobuf/InvalidProtocolBufferException.java b/java/core/src/main/java/com/google/protobuf/InvalidProtocolBufferException.java
index 7f36e09..fb7eb8f 100644
--- a/java/core/src/main/java/com/google/protobuf/InvalidProtocolBufferException.java
+++ b/java/core/src/main/java/com/google/protobuf/InvalidProtocolBufferException.java
@@ -155,7 +155,7 @@ public class InvalidProtocolBufferException extends IOException {
   static InvalidProtocolBufferException recursionLimitExceeded() {
     return new InvalidProtocolBufferException(
         "Protocol message had too many levels of nesting.  May be malicious.  "
-            + "Use CodedInputStream.setRecursionLimit() to increase the depth limit.");
+            + "Use setRecursionLimit() to increase the recursion depth limit.");
   }
 
   static InvalidProtocolBufferException sizeLimitExceeded() {
diff --git a/java/core/src/main/java/com/google/protobuf/MessageSchema.java b/java/core/src/main/java/com/google/protobuf/MessageSchema.java
index ae5dddc..3d9f7b4 100644
--- a/java/core/src/main/java/com/google/protobuf/MessageSchema.java
+++ b/java/core/src/main/java/com/google/protobuf/MessageSchema.java
@@ -3946,6 +3946,7 @@ final class MessageSchema<T> implements Schema<T> {
               unknownFields = unknownFieldSchema.getBuilderFromMessage(message);
             }
             // Unknown field.
+
             if (unknownFieldSchema.mergeOneFieldFrom(unknownFields, reader)) {
               continue;
             }
@@ -4321,6 +4322,7 @@ final class MessageSchema<T> implements Schema<T> {
               if (unknownFields == null) {
                 unknownFields = unknownFieldSchema.getBuilderFromMessage(message);
               }
+
               if (!unknownFieldSchema.mergeOneFieldFrom(unknownFields, reader)) {
                 return;
               }
@@ -4337,6 +4339,7 @@ final class MessageSchema<T> implements Schema<T> {
             if (unknownFields == null) {
               unknownFields = unknownFieldSchema.getBuilderFromMessage(message);
             }
+
             if (!unknownFieldSchema.mergeOneFieldFrom(unknownFields, reader)) {
               return;
             }
diff --git a/java/core/src/main/java/com/google/protobuf/MessageSetSchema.java b/java/core/src/main/java/com/google/protobuf/MessageSetSchema.java
index 987c086..77b52d3 100644
--- a/java/core/src/main/java/com/google/protobuf/MessageSetSchema.java
+++ b/java/core/src/main/java/com/google/protobuf/MessageSetSchema.java
@@ -301,6 +301,7 @@ final class MessageSetSchema<T> implements Schema<T> {
               reader, extension, extensionRegistry, extensions);
           return true;
         } else {
+
           return unknownFieldSchema.mergeOneFieldFrom(unknownFields, reader);
         }
       } else {
diff --git a/java/core/src/main/java/com/google/protobuf/UnknownFieldSchema.java b/java/core/src/main/java/com/google/protobuf/UnknownFieldSchema.java
index 681b824..6622424 100644
--- a/java/core/src/main/java/com/google/protobuf/UnknownFieldSchema.java
+++ b/java/core/src/main/java/com/google/protobuf/UnknownFieldSchema.java
@@ -78,7 +78,6 @@ abstract class UnknownFieldSchema<T, B> {
   /** Marks unknown fields as immutable. */
   abstract void makeImmutable(Object message);
 
-  /** Merges one field into the unknown fields. */
   final boolean mergeOneFieldFrom(B unknownFields, Reader reader) throws IOException {
     int tag = reader.getTag();
     int fieldNumber = WireFormat.getTagFieldNumber(tag);
@@ -111,7 +110,7 @@ abstract class UnknownFieldSchema<T, B> {
     }
   }
 
-  final void mergeFrom(B unknownFields, Reader reader) throws IOException {
+  private final void mergeFrom(B unknownFields, Reader reader) throws IOException {
     while (true) {
       if (reader.getFieldNumber() == Reader.READ_DONE
           || !mergeOneFieldFrom(unknownFields, reader)) {
diff --git a/java/lite/src/test/java/com/google/protobuf/LiteTest.java b/java/lite/src/test/java/com/google/protobuf/LiteTest.java
index a58ce95..cc664e6 100644
--- a/java/lite/src/test/java/com/google/protobuf/LiteTest.java
+++ b/java/lite/src/test/java/com/google/protobuf/LiteTest.java
@@ -33,12 +33,14 @@ package com.google.protobuf;
 import static com.google.common.truth.Truth.assertThat;
 import static com.google.common.truth.Truth.assertWithMessage;
 import static java.util.Collections.singletonList;
+import static org.junit.Assert.assertThrows;
 
 import com.google.protobuf.FieldPresenceTestProto.TestAllTypes;
 import com.google.protobuf.UnittestImportLite.ImportEnumLite;
 import com.google.protobuf.UnittestImportPublicLite.PublicImportMessageLite;
 import com.google.protobuf.UnittestLite.ForeignEnumLite;
 import com.google.protobuf.UnittestLite.ForeignMessageLite;
+import com.google.protobuf.UnittestLite.RecursiveGroup;
 import com.google.protobuf.UnittestLite.RecursiveMessage;
 import com.google.protobuf.UnittestLite.TestAllExtensionsLite;
 import com.google.protobuf.UnittestLite.TestAllTypesLite;
@@ -73,6 +75,7 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.atomic.AtomicBoolean;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/src/google/protobuf/unittest_lite.proto b/src/google/protobuf/unittest_lite.proto
index b594b6f..0a179bb 100644
--- a/src/google/protobuf/unittest_lite.proto
+++ b/src/google/protobuf/unittest_lite.proto
@@ -523,3 +523,7 @@ message RecursiveMessage {
   optional RecursiveMessage recurse = 1;
   optional bytes payload = 2;
 }
+
+message RecursiveGroup {
+  optional RecursiveGroup recurse = 1 [features.message_encoding = DELIMITED];
+}
-- 
2.39.4


From 5089e404ea2f1b3bb65e878cd94c4f0a1379ca2e Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Mon, 12 Jul 2021 21:51:15 +0530
Subject: [PATCH] Add mkinitrd support to dracut

dracut upstream removed mkinitrd:
https://github.com/dracutdevs/dracut/commit/43df4ee274e7135aff87868bf3bf2fbab47aa8b4

Photon OS needs this tool.

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 Makefile           |   4 +-
 man/dracut.asc     |   3 +
 man/mkinitrd.8.asc |  66 +++++++++++++
 mkinitrd-dracut.sh | 225 +++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 297 insertions(+), 1 deletion(-)
 create mode 100644 man/mkinitrd.8.asc
 create mode 100755 mkinitrd-dracut.sh

diff --git a/Makefile b/Makefile
index e7d69e10..e797a05b 100644
--- a/Makefile
+++ b/Makefile
@@ -37,6 +37,7 @@ man7pages = man/dracut.cmdline.7 \
             man/dracut.modules.7
 
 man8pages = man/dracut.8 \
+            man/mkinitrd.8 \
             man/dracut-catimages.8 \
             modules.d/98dracut-systemd/dracut-cmdline.service.8 \
             modules.d/98dracut-systemd/dracut-initqueue.service.8 \
@@ -148,6 +149,7 @@ install: all
 	mkdir -p $(DESTDIR)$(mandir)/man1 $(DESTDIR)$(mandir)/man5 $(DESTDIR)$(mandir)/man7 $(DESTDIR)$(mandir)/man8
 	install -m 0755 dracut.sh $(DESTDIR)$(bindir)/dracut
 	install -m 0755 dracut-catimages.sh $(DESTDIR)$(bindir)/dracut-catimages
+	install -m 0755 mkinitrd-dracut.sh $(DESTDIR)$(bindir)/mkinitrd
 	install -m 0755 lsinitrd.sh $(DESTDIR)$(bindir)/lsinitrd
 	install -m 0644 dracut.conf $(DESTDIR)$(sysconfdir)/dracut.conf
 	mkdir -p $(DESTDIR)$(sysconfdir)/dracut.conf.d
@@ -265,7 +267,7 @@ srpm: syncheck
 endif
 
 syncheck:
-	@ret=0;for i in dracut-initramfs-restore.sh modules.d/*/*.sh; do \
+	@ret=0;for i in dracut-initramfs-restore.sh mkinitrd-dracut.sh modules.d/*/*.sh; do \
                 [ "$${i##*/}" = "module-setup.sh" ] && continue; \
                 read line < "$$i"; [ "$${line#*bash*}" != "$$line" ] && continue; \
 		[ $$V ] && echo "posix syntax check: $$i"; bash --posix -n "$$i" ; ret=$$(($$ret+$$?)); \
diff --git a/man/dracut.asc b/man/dracut.asc
index cc11d01e..f35535c2 100644
--- a/man/dracut.asc
+++ b/man/dracut.asc
@@ -162,6 +162,9 @@ include::dracut.cmdline.7.asc[]
 [[lsinitrd1]]
 include::lsinitrd.1.asc[]
 
+[[mkinitrd8]]
+include::mkinitrd.8.asc[]
+
 = Developer Manual
 
 :leveloffset: 1
diff --git a/man/mkinitrd.8.asc b/man/mkinitrd.8.asc
new file mode 100644
index 00000000..82afe2df
--- /dev/null
+++ b/man/mkinitrd.8.asc
@@ -0,0 +1,66 @@
+MKINITRD(8)
+=========
+:doctype: manpage
+:man source:   dracut
+:man manual:   dracut
+:man version:  {version}
+
+NAME
+----
+mkinitrd - is a compat wrapper, which calls dracut to generate an initramfs
+
+SYNOPSIS
+--------
+*mkinitrd* ['OPTION...'] [<initrd-image>]  <kernel-version>
+
+DESCRIPTION
+-----------
+mkinitrd creates an initramfs image <initrd-image> for the kernel with
+version <kernel-version> by calling "dracut".
+
+[IMPORTANT]
+If a more fine grained control over the resulting image is needed,
+"dracut" should be called directly.
+
+OPTIONS
+-------
+**--version**::
+    print info about the version
+
+**-v, --verbose**::
+    increase verbosity level
+
+**-f, --force**::
+    overwrite existing initramfs file.
+
+**--image-version*::
+    append the kernel version to the target image
+    <initrd-image>-<kernel-version>.
+
+**--with=<module>**::
+     add the kernel module <module> to the initramfs.
+
+**--preload=<module>**::
+     preload the kernel module <module> in the initramfs before any other kernel
+     modules are loaded. This can be used to ensure a certain device naming,
+     which should in theory be avoided and the use of symbolic links in /dev is
+     encouraged.
+
+**--nocompress**::
+     do not compress the resulting image.
+
+**--help**::
+    print a help message and exit.
+
+AVAILABILITY
+------------
+The mkinitrd command is part of the dracut package and is available from
+link:$$https://dracut.wiki.kernel.org$$[https://dracut.wiki.kernel.org]
+
+AUTHORS
+-------
+Harald Hoyer
+
+SEE ALSO
+--------
+*dracut*(8)
diff --git a/mkinitrd-dracut.sh b/mkinitrd-dracut.sh
new file mode 100755
index 00000000..657e8b29
--- /dev/null
+++ b/mkinitrd-dracut.sh
@@ -0,0 +1,225 @@
+#!/bin/bash --norc
+kver=$(uname -r)
+
+boot_dir="/boot"
+quiet=0
+host_only=0
+force=0
+
+error() { echo "$@" >&2; }
+
+usage () {
+    [[ $1 = '-n' ]] && cmd=echo || cmd=error
+
+    $cmd "usage: ${0##*/} [--version] [--help] [-v] [-f] [--preload <module>]"
+    $cmd "       [--image-version] [--with=<module>]"
+    $cmd "       [--nocompress]"
+    $cmd "       <initrd-image> <kernel-version>"
+    $cmd ""
+    $cmd "       (ex: ${0##*/} /boot/initramfs-$kver.img $kver)"
+
+    [[ $1 = '-n' ]] && exit 0
+    exit 1
+}
+
+# Little helper function for reading args from the commandline.
+# it automatically handles -a b and -a=b variants, and returns 1 if
+# we need to shift $3.
+read_arg() {
+    # $1 = arg name
+    # $2 = arg value
+    # $3 = arg parameter
+    param="$1"
+    local rematch='^[^=]*=(.*)$' result
+    if [[ $2 =~ $rematch ]]; then
+        read "$param" <<< "${BASH_REMATCH[1]}"
+    else
+	for ((i=3; $i <= $#; i++)); do
+            # Only read next arg if it not an arg itself.
+            if [[ ${*:$i:1} = -* ]];then
+		break
+            fi
+            result="$result ${@:$i:1}"
+            # There is no way to shift our callers args, so
+            # return "no of args" to indicate they should do it instead.
+	done
+	read "$1" <<< "$result"
+        return $(($i - 3))
+    fi
+}
+
+# Taken over from SUSE mkinitrd
+default_kernel_images() {
+    local regex kernel_image kernel_version version_version initrd_image
+    local qf='%{NAME}-%{VERSION}-%{RELEASE}\n'
+
+    case "${DRACUT_ARCH:-$(uname -m)}" in
+        s390|s390x)
+            regex='image'
+            ;;
+        ppc*)
+            regex='vmlinux'
+            ;;
+        i?86|x86_64)
+            regex='vmlinuz'
+            ;;
+        arm*)
+            regex='[uz]Image'
+            ;;
+        aarch64|riscv64)
+            regex='Image'
+            ;;
+        *)  regex='vmlinu.'
+            ;;
+    esac
+
+    # user mode linux
+    if grep -q UML /proc/cpuinfo; then
+            regex='linux'
+    fi
+
+    kernel_images=""
+    initrd_images=""
+    for kernel_image in $(ls $boot_dir \
+            | sed -ne "\|^$regex\(-[0-9.]\+-[0-9]\+-[a-z0-9]\+$\)\?|p" \
+            | grep -v kdump$ ) ; do
+
+        # Note that we cannot check the RPM database here -- this
+        # script is itself called from within the binary kernel
+        # packages, and rpm does not allow recursive calls.
+
+        [ -L "$boot_dir/$kernel_image" ] && continue
+        [ "${kernel_image%%.gz}" != "$kernel_image" ] && continue
+        kernel_version=$(/usr/bin/get_kernel_version \
+                         $boot_dir/$kernel_image 2> /dev/null)
+        initrd_image=$(echo $kernel_image | sed -e "s|${regex}|initrd|")
+        if [ "$kernel_image" != "$initrd_image" -a \
+             -n "$kernel_version" -a \
+             -d "/lib/modules/$kernel_version" ]; then
+                kernel_images="$kernel_images $boot_dir/$kernel_image"
+                initrd_images="$initrd_images $boot_dir/$initrd_image"
+        fi
+    done
+    for kernel_image in $kernel_images;do
+	kernels="$kernels ${kernel_image#*-}"
+    done
+    for initrd_image in $initrd_images;do
+	targets="$targets $initrd_image"
+    done
+    host_only=1
+    force=1
+}
+
+while (($# > 0)); do
+    case ${1%%=*} in
+        --with-usb) read_arg usbmodule "$@" || shift $?
+            basicmodules="$basicmodules ${usbmodule:-usb-storage}"
+            unset usbmodule;;
+        --with-avail) read_arg modname "$@" || shift $?
+            basicmodules="$basicmodules $modname";;
+        --with) read_arg modname "$@" || shift $?
+            basicmodules="$basicmodules $modname";;
+        --version)
+            echo "mkinitrd: dracut compatibility wrapper"
+            exit 0;;
+        -v|--verbose) dracut_args="${dracut_args} -v";;
+        -f|--force) force=1;;
+        --preload) read_arg modname "$@" || shift $?
+            basicmodules="$basicmodules $modname";;
+        --image-version) img_vers=yes;;
+        --rootfs|-d) read_arg rootfs "$@" || shift $?
+            dracut_args="${dracut_args} --filesystems $rootfs";;
+        --nocompress) dracut_args="$dracut_args --no-compress";;
+        --help) usage -n;;
+        --builtin) ;;
+        --without*) ;;
+        --without-usb) ;;
+        --fstab*) ;;
+        --ifneeded) ;;
+        --omit-scsi-modules) ;;
+        --omit-ide-modules) ;;
+        --omit-raid-modules) ;;
+        --omit-lvm-modules) ;;
+        --omit-dmraid) ;;
+        --allow-missing) ;;
+        --net-dev*) ;;
+        --noresume) ;;
+        --rootdev*) ;;
+        --thawdev*) ;;
+        --rootopts*) ;;
+        --root*) ;;
+        --loopdev*) ;;
+        --loopfs*) ;;
+        --loopopts*) ;;
+        --looppath*) ;;
+        --dsdt*) ;;
+	-s) ;;
+	--quiet|-q) quiet=1;;
+	-b) read_arg boot_dir "$@" || shift $?
+	    if [ ! -d $boot_dir ];then
+		error "Boot directory $boot_dir does not exist"
+		exit 1
+	    fi
+	    ;;
+	-k) # Would be nice to get a list of images here
+	    read_arg kernel_images "$@" || shift $?
+	    for kernel_image in $kernel_images;do
+		kernels="$kernels ${kernel_image#*-}"
+	    done
+	    host_only=1
+	    force=1
+	    ;;
+	-i) read_arg initrd_images "$@" || shift $?
+	    for initrd_image in $initrd_images;do
+		targets="$targets $boot_dir/$initrd_image"
+	    done
+	    ;;
+        *)  if [[ ! $targets ]]; then
+            targets=$1
+            elif [[ ! $kernels ]]; then
+            kernels=$1
+            else
+            usage
+            fi;;
+    esac
+    shift
+done
+
+[[ $targets && $kernels ]] || default_kernel_images
+[[ $targets && $kernels ]] || (error "No kernel found in $boot_dir" && usage)
+
+# We can have several targets/kernels, transform the list to an array
+targets=( $targets )
+[[ $kernels ]] && kernels=( $kernels )
+
+[[ $host_only == 1 ]] && dracut_args="${dracut_args} -H"
+[[ $force == 1 ]]     && dracut_args="${dracut_args} -f"
+
+echo "Creating: target|kernel|dracut args|basicmodules "
+for ((i=0 ; $i<${#targets[@]} ; i++)); do
+
+    if [[ $img_vers ]];then
+	target="${targets[$i]}-${kernels[$i]}"
+    else
+	target="${targets[$i]}"
+    fi
+    kernel="${kernels[$i]}"
+
+    # Duplicate code: No way found how to redirect output based on $quiet
+    if [[ $quiet == 1 ]];then
+	echo "$target|$kernel|$dracut_args|$basicmodules"
+	if [[ $basicmodules ]]; then
+            dracut $dracut_args --add-drivers "$basicmodules" "$target" \
+		"$kernel" &>/dev/null
+	else
+            dracut $dracut_args "$target" "$kernel" &>/dev/null
+	fi
+    else
+	if [[ $basicmodules ]]; then
+            dracut $dracut_args --add-drivers "$basicmodules" "$target" \
+		"$kernel"
+	else
+            dracut $dracut_args "$target" "$kernel"
+	fi
+    fi
+done
-- 
2.17.1


From d05f240578e805116dfef848b167ea49e5163b93 Mon 15 Nov 2021 16:26:57 +0000
From: Asumu Takikawa <asumu@igalia.com>
Date: Mon, 15 Nov 2021 16:26:57 +0000
Subject: Bug 1739683 - Fix code offset use in Wasm calls. r=rhunt,lth a=RyanVM

---

diff --color -Naur a/js/src/jit/CodeGenerator.cpp b/js/src/jit/CodeGenerator.cpp
--- a/js/src/jit/CodeGenerator.cpp	2020-09-30 21:31:15
+++ b/js/src/jit/CodeGenerator.cpp	2023-08-28 15:37:00
@@ -8101,27 +8101,28 @@
 
   const wasm::CallSiteDesc& desc = mir->desc();
   const wasm::CalleeDesc& callee = mir->callee();
+  CodeOffset retOffset;
   switch (callee.which()) {
     case wasm::CalleeDesc::Func:
-      masm.call(desc, callee.funcIndex());
+      retOffset = masm.call(desc, callee.funcIndex());
       reloadRegs = false;
       switchRealm = false;
       break;
     case wasm::CalleeDesc::Import:
-      masm.wasmCallImport(desc, callee);
+      retOffset = masm.wasmCallImport(desc, callee);
       break;
     case wasm::CalleeDesc::AsmJSTable:
     case wasm::CalleeDesc::WasmTable:
-      masm.wasmCallIndirect(desc, callee, needsBoundsCheck);
+      retOffset = masm.wasmCallIndirect(desc, callee, needsBoundsCheck);
       reloadRegs = switchRealm = callee.which() == wasm::CalleeDesc::WasmTable;
       break;
     case wasm::CalleeDesc::Builtin:
-      masm.call(desc, callee.builtin());
+      retOffset = masm.call(desc, callee.builtin());
       reloadRegs = false;
       switchRealm = false;
       break;
     case wasm::CalleeDesc::BuiltinInstanceMethod:
-      masm.wasmCallBuiltinInstanceMethod(desc, mir->instanceArg(),
+      retOffset = masm.wasmCallBuiltinInstanceMethod(desc, mir->instanceArg(),
                                          callee.builtin(),
                                          mir->builtinMethodFailureMode());
       switchRealm = false;
@@ -8129,7 +8130,7 @@
   }
 
   // Note the assembler offset for the associated LSafePoint.
-  markSafepointAt(masm.currentOffset(), lir);
+  markSafepointAt(retOffset.offset(), lir);
 
   // Now that all the outbound in-memory args are on the stack, note the
   // required lower boundary point of the associated StackMap.

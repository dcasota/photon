From 47d22545e0b3ff3edfd1fb7dd2e3b386a8962f7b Mon Sep 17 00:00:00 2001
From: Ajay Kaher <akaher@vmware.com>
Date: Tue, 13 Jun 2023 11:09:20 +0530
Subject: [PATCH 2/2] grub2-emu: fix if /boot as partition

grub2-emu uses Kexec to switch the Kernel.
Kexec doesn't understand grub devices i.e. (hd*,gpt*), and if /boot is a
separate partition then need to append /boot for linux and initrd paths.

grub2-emu using /proc/mounts finds if /boot is separate partition and
accordingly adds /boot to linux and initrd paths.
---
 grub-core/loader/emu/linux.c | 78 +++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 70 insertions(+), 8 deletions(-)

diff --git a/grub-core/loader/emu/linux.c b/grub-core/loader/emu/linux.c
index fda9e00..a00d5ca 100644
--- a/grub-core/loader/emu/linux.c
+++ b/grub-core/loader/emu/linux.c
@@ -20,6 +20,8 @@
 #include <grub/dl.h>
 #include <grub/command.h>
 #include <grub/time.h>
+#include <grub/file.h>
+#include <grub/normal.h>
 
 #include <grub/emu/exec.h>
 #include <grub/emu/hostfile.h>
@@ -33,6 +35,47 @@ static char *kernel_path;
 static char *initrd_path;
 static char *boot_cmdline;
 
+#define GRUB_BOOT_PATH "/boot"
+#define GRUB_ROOT_PATH "/"
+
+static int separate_boot = -1;
+
+static char *
+get_boot_path()
+{
+  grub_file_t f;
+  char *line = NULL;
+
+  if (separate_boot != -1)
+    goto probed;
+
+  separate_boot = 0;
+
+  f = grub_file_open ("(host)/proc/mounts", GRUB_FILE_TYPE_CONFIG);
+  if (f == NULL)
+    goto probed;
+
+  while ((line = grub_file_getline (f)))
+    {
+      if (grub_strstr (line, " " GRUB_BOOT_PATH " "))
+        {
+          separate_boot = 1;
+          grub_free (line);
+          break;
+        }
+
+      grub_free(line);
+    }
+
+  grub_file_close (f);
+ probed:
+  if (!separate_boot)
+    return GRUB_ROOT_PATH;
+
+  return GRUB_BOOT_PATH;
+}
+
+
 static grub_err_t
 grub_linux_boot (void)
 {
@@ -100,19 +143,27 @@ grub_cmd_linux (grub_command_t cmd __attribute__ ((unused)), int argc, char *arg
 {
   int i;
   char *tempstr;
+  char *boot_path;
 
   grub_dl_ref (my_mod);
 
   if (argc == 0)
     return grub_error (GRUB_ERR_BAD_ARGUMENT, N_("filename expected"));
 
-  if ( !grub_util_is_regular(argv[0]) )
-    return grub_error(GRUB_ERR_FILE_NOT_FOUND, N_("Cannot find kernel file %s"), argv[0]);
-
   if ( kernel_path != NULL )
     grub_free(kernel_path);
 
-  kernel_path = grub_xasprintf("%s", argv[0]);
+  boot_path = get_boot_path();
+  kernel_path = grub_xasprintf("%s%s", boot_path, argv[0]);
+
+  grub_dprintf ("debug", "kernel_path = %s\n",kernel_path);
+
+  if ( !grub_util_is_regular(kernel_path)) {
+    if ( kernel_path != NULL )
+      grub_free(kernel_path);
+    kernel_path = NULL;
+    return grub_error(GRUB_ERR_FILE_NOT_FOUND, N_("Cannot find kernel file %s"), argv[0]);
+  }
 
   if ( boot_cmdline != NULL ) {
     grub_free(boot_cmdline);
@@ -129,6 +180,8 @@ grub_cmd_linux (grub_command_t cmd __attribute__ ((unused)), int argc, char *arg
     }
   }
 
+  grub_dprintf ("debug", "boot_cmdline = %s\n",boot_cmdline);
+
   grub_loader_set (grub_linux_boot, grub_linux_unload, 0);
 
   return GRUB_ERR_NONE;
@@ -137,16 +190,25 @@ grub_cmd_linux (grub_command_t cmd __attribute__ ((unused)), int argc, char *arg
 static grub_err_t
 grub_cmd_initrd (grub_command_t cmd __attribute__ ((unused)), int argc, char *argv[])
 {
+  char *boot_path;
+
   if (argc == 0)
     return grub_error (GRUB_ERR_BAD_ARGUMENT, N_("filename expected"));
 
-  if ( !grub_util_is_regular(argv[0]) )
-    return grub_error(GRUB_ERR_FILE_NOT_FOUND, N_("Cannot find initrd file %s"), argv[0]);
-
   if ( initrd_path != NULL )
     grub_free(initrd_path);
 
-  initrd_path = grub_xasprintf("%s", argv[0]);
+  boot_path = get_boot_path(boot_path);
+  initrd_path = grub_xasprintf("%s%s", boot_path, argv[0]);
+
+  grub_dprintf ("debug", "initrd_path = %s\n",initrd_path);
+
+  if ( !grub_util_is_regular(initrd_path) ) {
+    if ( initrd_path != NULL )
+      grub_free(initrd_path);
+    initrd_path = NULL;
+    return grub_error(GRUB_ERR_FILE_NOT_FOUND, N_("Cannot find initrd file %s"), argv[0]);
+  }
 
   grub_dl_unref (my_mod);
 
-- 
2.7.4


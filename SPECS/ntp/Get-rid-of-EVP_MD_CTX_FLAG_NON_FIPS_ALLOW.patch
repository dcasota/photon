From ea04b7ee335a644ef7e61ffde34b060d9432a070 Mon Sep 17 00:00:00 2001
From: michellew-vmware <michellew@vmware.com>
Date: Tue, 27 Jun 2023 16:51:30 +0000
Subject: [PATCH] Get rid of EVP_MD_CTX_FLAG_NON_FIPS_ALLOW

- openssl-3.x provides EVP_MD_fech() api to make use of non fips algorithms in user space programs.
- EVP_MD_CTX_FLAG_NON_FIPS_ALLOW is obsolete.

---
 libntp/a_md5encrypt.c | 80 ++++++++++++++++++++++++++++++++++++++-----
 ntpd/ntp_control.c    | 23 ++++++++++---
 ntpd/ntp_crypto.c     | 45 +++++++++++++++++++-----
 sntp/crypto.c         | 40 +++++++++++++++++++---
 4 files changed, 161 insertions(+), 27 deletions(-)

diff --git a/libntp/a_md5encrypt.c b/libntp/a_md5encrypt.c
index 7a37296..8043edf 100644
--- a/libntp/a_md5encrypt.c
+++ b/libntp/a_md5encrypt.c
@@ -11,6 +11,8 @@
 #include "ntp.h"
 #include "isc/string.h"
 
+#include <openssl/core_names.h>
+
 typedef struct {
 	const void *	buf;
 	size_t		len;
@@ -110,10 +112,31 @@ make_mac(
 			goto mac_fail;
 		}
 
-	   #ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
-		/* make sure MD5 is allowd */
-		EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-	   #endif
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
+               /* make sure MD5 is allowed */
+        OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+        if (!octx) {
+            msyslog(LOG_ERR, "MAC encrypt: OSSL_LIB_CTX_new failed\n");
+            goto mac_fail;
+        }
+
+        EVP_MD *type = EVP_MD_fetch(octx, OBJ_nid2sn(ktype), "-fips");
+        if (!type) {
+            msyslog(LOG_ERR, "MAC encrypt: EVP_MD_fetch failed\n");
+            goto mac_fail;
+        }
+
+        if (!EVP_DigestInit_ex(ctx, type, NULL)) {
+            msyslog(LOG_ERR, "MAC encrypt: MAC %s Digest Init failed.",
+                    OBJ_nid2sn(ktype));
+            goto mac_fail;
+        }
+#   else
+#       ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+        EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#       endif
+
+
 		/* [Bug 3457] DON'T use plain EVP_DigestInit! It would
 		 * kill the flags! */
 		if (!EVP_DigestInit_ex(ctx, EVP_get_digestbynid(ktype), NULL)) {
@@ -121,6 +144,8 @@ make_mac(
 				OBJ_nid2sn(ktype));
 			goto mac_fail;
 		}
+#       endif
+
 		if ((size_t)EVP_MD_CTX_size(ctx) > digest->len) {
 			msyslog(LOG_ERR, "MAC encrypt: MAC %s buf too small.",
 				OBJ_nid2sn(ktype));
@@ -146,6 +171,14 @@ make_mac(
 
 		if (ctx)
 			EVP_MD_CTX_free(ctx);
+
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+        if (type)
+            EVP_MD_free(type);
+        if (octx)
+            OSSL_LIB_CTX_free(octx);
+#   endif
+
 	}
 
 #else /* !OPENSSL follows */
@@ -270,23 +303,54 @@ addr2refid(sockaddr_u *addr)
 	INIT_SSL();
 
 	ctx = EVP_MD_CTX_new();
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
+    /* MD5 is not used as a crypto hash here. */
+    OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+    if (!octx) {
+        msyslog(LOG_ERR, "addr2refid: OSSL_LIB_CTX_new failed\n");
+        exit(1);
+    }
+
+    EVP_MD *type = EVP_MD_fetch(octx, OSSL_DIGEST_NAME_MD5, "-fips");
+    if (!type) {
+        msyslog(LOG_ERR, "addr2refid: EVP_MD_fetch failed\n");
+        exit(1);
+    }
+
+    if (!EVP_DigestInit_ex(ctx, type, NULL)) {
+        msyslog(LOG_ERR, "MD5 init failed");
+        EVP_MD_CTX_free(ctx);  /* pedantic... but safe */
+        exit(1);
+    }
+#   else
 #   ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
-	/* MD5 is not used as a crypto hash here. */
-	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+    EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
 #   endif
 	/* [Bug 3457] DON'T use plain EVP_DigestInit! It would kill the
 	 * flags! */
 	if (!EVP_DigestInit_ex(ctx, EVP_md5(), NULL)) {
 		msyslog(LOG_ERR,
 		    "MD5 init failed");
+                msyslog(LOG_ERR, "MD5 init failed");
 		EVP_MD_CTX_free(ctx);	/* pedantic... but safe */
 		exit(1);
 	}
+#   endif
 
 	EVP_DigestUpdate(ctx, (u_char *)PSOCK_ADDR6(addr),
 	    sizeof(struct in6_addr));
 	EVP_DigestFinal(ctx, digest, &len);
 	EVP_MD_CTX_free(ctx);
-	memcpy(&addr_refid, digest, sizeof(addr_refid));
-	return (addr_refid);
+
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
+    if (type)
+        EVP_MD_free(type);
+    if (octx)
+        OSSL_LIB_CTX_free(octx);
+#   endif
+
+    memcpy(&addr_refid, digest, sizeof(addr_refid));
+
+    return (addr_refid);
+
 }
diff --git a/ntpd/ntp_control.c b/ntpd/ntp_control.c
index 0cc7fcb..abae6ea 100644
--- a/ntpd/ntp_control.c
+++ b/ntpd/ntp_control.c
@@ -29,6 +29,8 @@
 #include "lib_strbuf.h"
 #include "timexsup.h"
 
+#include <openssl/core_names.h>
+
 #include <rc_cmdlength.h>
 #ifdef KERNEL_PLL
 # include "ntp_syscall.h"
@@ -3662,13 +3664,19 @@ static u_int32 derive_nonce(
 	}
 
 	ctx = EVP_MD_CTX_new();
-#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
-	/* [Bug 3457] set flags and don't kill them again */
-	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-	rc = EVP_DigestInit_ex(ctx, EVP_get_digestbynid(NID_md5), NULL);
+
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+       /* [Bug 3457] set flags and don't kill them again */
+       OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+       EVP_MD *type = EVP_MD_fetch(octx, OSSL_DIGEST_NAME_MD5, "-fips");
+       rc = EVP_DigestInit_ex(ctx, type, NULL);
 #   else
-	rc = EVP_DigestInit(ctx, EVP_get_digestbynid(NID_md5));
+#      ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+          EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#      endif
+       rc = EVP_DigestInit(ctx, EVP_get_digestbynid(NID_md5));
 #   endif
+
 	if (!rc) {
 		msyslog(LOG_ERR, "EVP_DigestInit failed in '%s'", __func__);
 		return (0);
@@ -3688,6 +3696,11 @@ static u_int32 derive_nonce(
 	EVP_DigestFinal(ctx, d.digest, &len);
 	EVP_MD_CTX_free(ctx);
 
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+       EVP_MD_free(type);
+       OSSL_LIB_CTX_free(octx);
+#   endif
+
 	return d.extract;
 }
 
diff --git a/ntpd/ntp_crypto.c b/ntpd/ntp_crypto.c
index 4a42076..dabf4b3 100644
--- a/ntpd/ntp_crypto.c
+++ b/ntpd/ntp_crypto.c
@@ -34,6 +34,8 @@
 #include "openssl/x509v3.h"
 #include "libssl_compat.h"
 
+#include <openssl/core_names.h>
+
 #ifdef KERNEL_PLL
 #include "ntp_syscall.h"
 #endif /* KERNEL_PLL */
@@ -268,16 +270,28 @@ session_key(
 		break;
 	}
 	ctx = EVP_MD_CTX_new();
-#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
-	/* [Bug 3457] set flags and don't kill them again */
-	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-	EVP_DigestInit_ex(ctx, EVP_get_digestbynid(crypto_nid), NULL);
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+       /* [Bug 3457] set flags and don't kill them again */
+       OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+       EVP_MD *type = EVP_MD_fetch(octx, OBJ_nid2sn(crypto_nid), "-fips");
+       EVP_DigestInit_ex(ctx, type, NULL);
 #   else
-	EVP_DigestInit(ctx, EVP_get_digestbynid(crypto_nid));
+#      ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+          EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#      endif
+
+       EVP_DigestInit(ctx, EVP_get_digestbynid(crypto_nid));
 #   endif
+
 	EVP_DigestUpdate(ctx, (u_char *)header, hdlen);
 	EVP_DigestFinal(ctx, dgst, &len);
 	EVP_MD_CTX_free(ctx);
+
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+       EVP_MD_free(type);
+       OSSL_LIB_CTX_free(octx);
+#   endif
+
 	memcpy(&keyid, dgst, 4);
 	keyid = ntohl(keyid);
 	if (lifetime != 0) {
@@ -2094,16 +2108,29 @@ bighash(
 	ptr = emalloc(len);
 	BN_bn2bin(bn, ptr);
 	ctx = EVP_MD_CTX_new();
-#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
-	/* [Bug 3457] set flags and don't kill them again */
-	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-	EVP_DigestInit_ex(ctx, EVP_md5(), NULL);
+
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+       /* [Bug 3457] set flags and don't kill them again */
+       OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+       EVP_MD *type = EVP_MD_fetch(octx, OSSL_DIGEST_NAME_MD5, "-fips");
+       EVP_DigestInit_ex(ctx, type, NULL);
 #   else
+#      ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+          EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#       endif
+
 	EVP_DigestInit(ctx, EVP_md5());
 #   endif
+
 	EVP_DigestUpdate(ctx, ptr, len);
 	EVP_DigestFinal(ctx, dgst, &len);
 	EVP_MD_CTX_free(ctx);
+
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+       EVP_MD_free(type);
+       OSSL_LIB_CTX_free(octx);
+#   endif
+
 	BN_bin2bn(dgst, len, bk);
 	free(ptr);
 }
diff --git a/sntp/crypto.c b/sntp/crypto.c
index 7807ccc..d7c5d6c 100644
--- a/sntp/crypto.c
+++ b/sntp/crypto.c
@@ -80,16 +80,38 @@ compute_mac(
 			goto mac_fail;
 		}
 #ifdef OPENSSL	/* OpenSSL 1 supports return codes 0 fail, 1 okay */
-#	    ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
-		EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-#	    endif
-		/* [Bug 3457] DON'T use plain EVP_DigestInit! It would
+
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
+        OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+        if (!octx) {
+            msyslog(LOG_ERR, "make_mac: OSSL_LIB_CTX_new failed");
+            goto mac_fail;
+        }
+
+        EVP_MD *type = EVP_MD_fetch(octx, OBJ_nid2sn(key_type), "-fips");
+        if (!type) {
+            msyslog(LOG_ERR, "make_mac: EVP_MD_fetch failed");
+            goto mac_fail;
+        }
+
+                /* [Bug 3457] DON'T use plain EVP_DigestInit! It would
 		 *  kill the flags! */
-		if (!EVP_DigestInit_ex(ctx, EVP_get_digestbynid(key_type), NULL)) {
+		if (!EVP_DigestInit_ex(ctx, type, NULL)) {
 			msyslog(LOG_ERR, "make_mac: MAC %s Digest Init failed.",
 				macname);
 			goto mac_fail;
 		}
+#   else
+#       ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+           EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#       endif
+        if (!EVP_DigestInit_ex(ctx, EVP_get_digestbynid(key_type), NULL)) {
+            msyslog(LOG_ERR, "make_mac: MAC %s Digest Init failed.",
+                    macname);
+            goto mac_fail;
+        }
+#   endif
+
 		if (!EVP_DigestUpdate(ctx, key_data, key_size)) {
 			msyslog(LOG_ERR, "make_mac: MAC %s Digest Update key failed.",
 				macname);
@@ -117,6 +139,14 @@ compute_mac(
 #endif
 	  mac_fail:
 		EVP_MD_CTX_free(ctx);
+
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+        if (type)
+            EVP_MD_free(type);
+        if (octx)
+            OSSL_LIB_CTX_free(octx);
+#   endif
+
 	}
 
 	return len;
-- 
2.23.3


From 409ff69bd1509499637f7088ef00b370ed703ea6 Mon Sep 17 00:00:00 2001
From: Philip Withnall <withnall@endlessm.com>
Date: Tue, 6 Nov 2018 11:43:43 +0000
Subject: [PATCH] gvariant: Re-use g_variant_serialised_check() to check
 alignment

Rather than duplicating the alignment checks when constructing a new
GVariant, re-use the alignment checks from GVariantSerialised. This
ensures that the same checks are done everywhere in the GVariant code.

Signed-off-by: Philip Withnall <withnall@endlessm.com>

https://gitlab.gnome.org/GNOME/glib/issues/1342
---
 glib/gvariant-core.c       |  7 ++++++-
 glib/gvariant-serialiser.c | 32 +++++++++++++++++---------------
 glib/gvariant-serialiser.h |  2 ++
 3 files changed, 25 insertions(+), 16 deletions(-)

Index: glib/glib/gvariant-core.c
===================================================================
--- glib.orig/glib/gvariant-core.c
+++ glib/glib/gvariant-core.c
@@ -518,6 +518,7 @@ g_variant_new_from_bytes (const GVariant
   GVariant *value;
   guint alignment;
   gsize size;
+  GVariantSerialised serialised;
 
   value = g_variant_alloc (type, TRUE, trusted);
 
Index: glib/glib/gvariant-serialiser.c
===================================================================
--- glib.orig/glib/gvariant-serialiser.c
+++ glib/glib/gvariant-serialiser.c
@@ -128,20 +128,24 @@
  *
  * Checks @serialised for validity according to the invariants described
  * above.
+ *
+ * Returns: %TRUE if @serialised is valid; %FALSE otherwise
  */
-static void
+gboolean
 g_variant_serialised_check (GVariantSerialised serialised)
 {
   gsize fixed_size;
   guint alignment;
 
-  g_assert (serialised.type_info != NULL);
+  if (serialised.type_info == NULL)
+    return FALSE;
   g_variant_type_info_query (serialised.type_info, &alignment, &fixed_size);
 
-  if (fixed_size)
-    g_assert_cmpint (serialised.size, ==, fixed_size);
-  else
-    g_assert (serialised.size == 0 || serialised.data != NULL);
+  if (fixed_size != 0 && serialised.size != fixed_size)
+    return FALSE;
+  else if (fixed_size == 0 &&
+           !(serialised.size == 0 || serialised.data != NULL))
+    return FALSE;
 
   /* Depending on the native alignment requirements of the machine, the
    * compiler will insert either 3 or 7 padding bytes after the char.
@@ -168,10 +172,8 @@ g_variant_serialised_check (GVariantSeri
    * Check if this is a small allocation and return without enforcing
    * the alignment assertion if this is the case.
    */
-  if (serialised.size <= alignment)
-    return;
-
-  g_assert_cmpint (alignment & (gsize) serialised.data, ==, 0);
+  return (serialised.size <= alignment ||
+          (alignment & (gsize) serialised.data) == 0);
 }
 
 /* < private >
@@ -1356,7 +1358,7 @@ gvs_variant_is_normal (GVariantSerialise
 gsize
 g_variant_serialised_n_children (GVariantSerialised serialised)
 {
-  g_variant_serialised_check (serialised);
+  g_assert (g_variant_serialised_check (serialised));
 
   DISPATCH_CASES (serialised.type_info,
 
@@ -1393,7 +1395,7 @@ g_variant_serialised_get_child (GVariant
 {
   GVariantSerialised child;
 
-  g_variant_serialised_check (serialised);
+  g_assert (g_variant_serialised_check (serialised));
 
   if G_LIKELY (index_ < g_variant_serialised_n_children (serialised))
     {
@@ -1401,7 +1403,7 @@ g_variant_serialised_get_child (GVariant
 
                       child = gvs_/**/,/**/_get_child (serialised, index_);
                       g_assert (child.size || child.data == NULL);
-                      g_variant_serialised_check (child);
+                      g_assert (g_variant_serialised_check (child));
                       return child;
 
                      )
@@ -1442,7 +1444,7 @@ g_variant_serialiser_serialise (GVariant
                                 const gpointer           *children,
                                 gsize                     n_children)
 {
-  g_variant_serialised_check (serialised);
+  g_assert (g_variant_serialised_check (serialised));
 
   DISPATCH_CASES (serialised.type_info,
 
@@ -1497,7 +1499,7 @@ g_variant_serialised_byteswap (GVariantS
   gsize fixed_size;
   guint alignment;
 
-  g_variant_serialised_check (serialised);
+  g_assert (g_variant_serialised_check (serialised));
 
   if (!serialised.data)
     return;
Index: glib/glib/gvariant-serialiser.h
===================================================================
--- glib.orig/glib/gvariant-serialiser.h
+++ glib/glib/gvariant-serialiser.h
@@ -55,6 +55,8 @@ void                            g_varian
                                                                          gsize                     n_children);
 
 /* misc */
+GLIB_AVAILABLE_IN_2_60
+gboolean                        g_variant_serialised_check              (GVariantSerialised        serialised);
 GLIB_AVAILABLE_IN_ALL
 gboolean                        g_variant_serialised_is_normal          (GVariantSerialised        value);
 GLIB_AVAILABLE_IN_ALL

From 759ced8cc045c52168f157acd89494411d094413 Mon Sep 17 00:00:00 2001
From: Keerthana K <keerthanak@vmware.com>
Date: Mon, 4 Sep 2023 08:12:16 +0000
Subject: [PATCH] Disable eBPF skeleton creation instead use eBPF object
 interface

- linux-rt-stalld-ebpf-plugin provides the interface for
  eBPF object and skeleton headers corresponding to installed kernel
- stalld eBPF based backend will use this plugin for
  boosting.

Co-Authored-By: Ankit Jain <ankit-ja.jain@broadcom.com>
Signed-off-by: Keerthana K <keerthanak@vmware.com>
Signed-off-by: Ankit Jain <ankitja@vmware.com>
---
 Makefile          | 54 +----------------------------------------------
 src/queue_track.c | 14 ++++++------
 2 files changed, 8 insertions(+), 60 deletions(-)

diff --git a/Makefile b/Makefile
index 8b53e12..13288df 100644
--- a/Makefile
+++ b/Makefile
@@ -70,7 +70,7 @@ LDFLAGS	:=	-ggdb
 
 LIBS	:=	 -lpthread
 ifeq ($(USE_BPF),1)
-LIBS	+=  -lbpf
+LIBS	+=  -lbpf -lstalld_bpf
 endif
 
 SRC	:=	$(wildcard src/*.c)
@@ -98,65 +98,16 @@ INSPATH :=	$(realpath $(DESTDIR))
 ifeq ($(USE_BPF),1)
 DEFAULT_BPFTOOL		?= bpftool
 BPFTOOL			?= $(DEFAULT_BPFTOOL)
-
-CLANG			?= clang
-LLVM_STRIP		?= llvm-strip
 endif
 
-KERNEL_REL		:= $(shell uname -r)
 VMLINUX_BTF_PATHS	:= /sys/kernel/btf/vmlinux /boot/vmlinux-$(KERNEL_REL)
 VMLINUX_BTF_PATH	:= $(or $(VMLINUX_BTF),$(firstword                            \
                                           $(wildcard $(VMLINUX_BTF_PATHS))))
 
-ifeq ($(ARCH),x86_64)
-CLANGARCH="-D__x86_64__"
-endif
-ifeq ($(ARCH),aarch64)
-CLANGARCH="-D__aarch64__"
-endif
-ifeq ($(ARCH),powerpc)
-CLANGARCH="-D__powerpc__"
-endif
-ifeq ($(ARCH),ppc64le)
-CLANGARCH="-D__ppc64le__"
-endif
-ifeq ($(ARCH),s390x)
-CLANGARCH=-D__s390x__
-endif
-
 .PHONY:	all tests
 
 all:	stalld tests
 
-ifeq ($(USE_BPF),1)
-# This is a dependency for eBPF, it collects kernel code information into
-# a .h file.
-bpf/vmlinux.h:
-	@if [ ! -e "$(VMLINUX_BTF_PATH)" ] ; then				\
-		echo "Couldn't find kernel BTF; set VMLINUX_BTF to"		\
-			"specify its location." >&2;				\
-		exit 1;								\
-	fi
-	$(BPFTOOL) btf dump file $(VMLINUX_BTF_PATH) format c > $@
-
-# This is the first step into compiling eBPF code.
-# The .bpf.c needs to be transformed into the .bpf.o.
-# The .bpf.o is then required to build the .skel.h.
-bpf/stalld.bpf.o: bpf/vmlinux.h bpf/stalld.bpf.c
-	@$(CLANG) -g -O2 -target bpf $(CLANGARCH) -D__TARGET_ARCH_$(ARCH) $(INCLUDES) $(CLANG_BPF_SYS_INCLUDES) -c $(filter %.c,$^) -o $@
-	@$(LLVM_STRIP) -g $@ # strip useless DWARF info
-
-# This is the second step: The .bpf.o object is translated into
-# a bytecode that is embedded into the .skel.h header.
-#
-# This header can then be used by the regular application to
-# load the BPF program into the kernel and to access it.
-src/stalld.skel.h: bpf/stalld.bpf.o
-	$(BPFTOOL) gen skeleton $< > $@
-
-$(OBJ): src/stalld.skel.h
-endif
-
 stalld: $(OBJ)
 	$(CC) -o stalld	 $(LDFLAGS) $(OBJ) $(LIBS)
 
@@ -186,9 +137,6 @@ clean:
 	@test ! -f $(TARBALL) || rm -f $(TARBALL)
 	@make -C systemd VERSION=$(VERSION) clean
 	@make -C tests clean
-	@test ! -f bpf/vmlinux.h || rm bpf/vmlinux.h
-	@test ! -f bpf/stalld.bpf.o || rm bpf/stalld.bpf.o
-	@test ! -f src/stalld.skel.h || rm src/stalld.skel.h
 	@rm -rf *~ $(OBJ) *.tar.$(CEXT)
 
 tarball:  clean
diff --git a/src/queue_track.c b/src/queue_track.c
index a29d110..e7aeab6 100644
--- a/src/queue_track.c
+++ b/src/queue_track.c
@@ -22,7 +22,7 @@
 #include <sys/resource.h>
 
 #include "queue_track.h"
-#include "stalld.skel.h"
+#include <stalld/stalld_bpf.h>
 #include "stalld.h"
 
 #include <pthread.h>
@@ -140,7 +140,7 @@ static struct stalld_bpf *load_ebpf_context(void)
 		return 0;
 	}
 
-	stalld_obj = stalld_bpf__open();
+	stalld_obj = stalld_bpf_open();
 	if (!stalld_obj) {
 		warn("failed to open and/or load BPF object\n");
 		return 0;
@@ -154,13 +154,13 @@ static struct stalld_bpf *load_ebpf_context(void)
 		log_msg("adjusted stalld map to %d cpus\n", config_nr_cpus);
 	}
 
-	err = stalld_bpf__load(stalld_obj);
+	err = stalld_bpf_load(stalld_obj);
 	if (err) {
 		warn("failed to load BPF object: %d\n", err);
 		goto cleanup;
 	}
 
-	err = stalld_bpf__attach(stalld_obj);
+	err = stalld_bpf_attach(stalld_obj);
 	if (err) {
 		warn("failed to attach BPF programs\n");
 		goto cleanup;
@@ -169,7 +169,7 @@ static struct stalld_bpf *load_ebpf_context(void)
 	return stalld_obj;
 
 cleanup:
-	stalld_bpf__destroy(stalld_obj);
+	stalld_bpf_destroy(stalld_obj);
 	return 0;
 }
 
@@ -297,7 +297,7 @@ static int queue_track_init(void)
 	return 0;
 
 destroy:
-	stalld_bpf__destroy(stalld_obj);
+	stalld_bpf_destroy(stalld_obj);
 	return 1;
 }
 
@@ -315,7 +315,7 @@ static void queue_track_destroy(void)
 		stalld_data.monitoring = 0;
 		set_cpu_data(&stalld_data, i);
 	}
-	stalld_bpf__destroy(stalld_obj);
+	stalld_bpf_destroy(stalld_obj);
 }
 
 struct stalld_backend queue_track_backend = {
-- 
2.39.0


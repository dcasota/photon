From 61cdb0408627ec17a0ffa20363bc6868b9a4e856 Mon Sep 17 00:00:00 2001
From: Keerthana K <keerthanak@vmware.com>
Date: Tue, 11 Apr 2023 09:33:15 +0000
Subject: [PATCH 1/9] stalld: Fix for "failed to parse cpu info warning"

Root cause:

This warning is printed in case parse_cpu_info is called
for a particular cpu with the buffer containing partial
"/proc/sched_debug" data about that CPU.

Fix for Agressive mode:
In the thread for a perticualr CPU, make sure that "/proc/sched"
data for that CPU is complete.

Fix for conservative mode:
Make sure complete "/proc/sched" data is read in buffer

Fix for single threaded mode:
Make sure complete "/proc/sched" data is read in buffer

Signed-off-by: Vikash Bansal <bvikas@vmware.com>
Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
Signed-off-by: Keerthana K <keerthanak@vmware.com>
Signed-off-by: Ankit Jain <ankit-ja.jain@broadcom.com>
---
 src/stalld.c | 141 +++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 137 insertions(+), 4 deletions(-)

diff --git a/src/stalld.c b/src/stalld.c
index 7c7b9cb..5a840c9 100644
--- a/src/stalld.c
+++ b/src/stalld.c
@@ -163,6 +163,29 @@ struct stalld_backend *backend = &sched_debug_backend;
  */
 char *config_affinity_cpus;
 
+/*
+ * Find the start of a CPU information block in the input buffer.
+ */
+static char *get_cpu_info_start(char *buffer, int cpu)
+{
+	/* 'cpu#9999,\0' */
+	char cpu_header[10];
+
+	sprintf(cpu_header, "cpu#%d,", cpu);
+
+	return strstr(buffer, cpu_header);
+}
+
+static char *get_next_cpu_info_start(char *start)
+{
+	const char *next_cpu = "cpu#";
+
+	/* Skip the current CPU definition. */
+	start += 10;
+
+	return strstr(start, next_cpu);
+}
+
 /*
  * API to fetch the process group ID for a thread/process.
  */
@@ -746,6 +769,35 @@ int check_might_starve_tasks(struct cpu_info *cpu)
 
 	return starving;
 }
+#define ONLINE_PATH_SIZE 64
+#define ONLINE_INFO_SIZE 5
+
+int is_cpu_online(int cpu_id)
+{
+	int fd;
+	char online_path[ONLINE_PATH_SIZE];
+	char online_info[ONLINE_INFO_SIZE];
+	int len;
+	int retval = 0;
+
+	snprintf(online_path, ONLINE_PATH_SIZE,
+		"/sys/devices/system/cpu/cpu%d/online", cpu_id);
+	fd = open(online_path, O_RDONLY);
+	if(fd < 0) {
+		/*
+		 * Maybe wrong CPU ID
+		 */
+		return 0;
+	}
+	len = read(fd, online_info, ONLINE_INFO_SIZE);
+	if (len < 0)
+		goto out_is_online;
+	online_info[len-1] = '\0';
+	retval = atoi(online_info);
+out_is_online:
+	close(fd);
+	return retval;
+}
 
 static int get_cpu_and_parse(struct cpu_info *cpu, char *buffer, int buffer_size)
 {
@@ -790,9 +842,11 @@ void *cpu_main(void *data)
 {
 	struct cpu_info *cpu = data;
 	int nothing_to_do = 0;
-	int retval;
+	int retval = 0;
 
 	while (cpu->thread_running && running) {
+		int old_config_buffer_size;
+		int alloc_failed = 0;
 
 		/* Buffer size should increase. See sched_debug_get(). */
 		if (config_buffer_size != cpu->buffer_size) {
@@ -801,8 +855,10 @@ void *cpu_main(void *data)
 			if (!cpu->buffer) {
 				warn("fail to increase the buffer... continue");
 				cpu->buffer = old_buffer;
+				alloc_failed = 1;
 			} else {
 				cpu->buffer_size = config_buffer_size;
+				alloc_failed = 0;
 			}
 		}
 
@@ -815,7 +871,46 @@ void *cpu_main(void *data)
 			}
 		}
 
-		retval = cpu_main_parse_starving_task(cpu);
+		old_config_buffer_size = config_buffer_size;
+		if (backend->get) {
+			retval = backend->get(cpu->buffer, cpu->buffer_size);
+			if(!retval) {
+				warn("fail reading backend");
+				warn("Dazed and confused, but trying to continue");
+				goto skipped;
+			}
+		}
+		/*
+		 * If new value of config_buf_size is more than old one then
+		 * read_sched_debug function doubled its size,
+		 * this is done in 2 cases
+		 * 1. /proc/sched is not read completely
+		 * 2. buffer is almost full
+		 * (retval + 2 > old_config_buffer_size) condition is added to
+		 * avoid 2nd case
+		 */
+		if((config_buffer_size > old_config_buffer_size) &&
+		    !alloc_failed && (retval + 2 > old_config_buffer_size)) {
+			int online;
+			char *next_cpu;
+			char *cpu_start;
+			online = is_cpu_online(cpu->id);
+			if(online) {
+				cpu_start = get_cpu_info_start(cpu->buffer, cpu->id);
+				/*
+				 * CPU info for current CPU is missing
+				 * need to read more, continue and read
+				 * data in bigger buffer
+				 */
+				if (!cpu_start)
+					continue;
+				next_cpu = get_next_cpu_info_start(cpu_start);
+				if(!next_cpu)
+					continue;
+			}
+		}
+
+		retval = get_cpu_and_parse(cpu, cpu->buffer, cpu->buffer_size);
 		if (retval)
 			goto skipped;
 
@@ -883,7 +978,7 @@ void conservative_main(struct cpu_info *cpus, int nr_cpus)
 	struct cpu_info *cpu;
 	char *buffer = NULL;
 	int has_busy_cpu;
-	int retval;
+	int retval = 0;
 	int i;
 
 	buffer = malloc(config_buffer_size);
@@ -901,6 +996,8 @@ void conservative_main(struct cpu_info *cpus, int nr_cpus)
 	}
 
 	while (running) {
+		int old_config_buffer_size;
+		int alloc_failed = 0;
 
 		/* Buffer size should increase. See sched_debug_get(). */
 		if (config_buffer_size != buffer_size) {
@@ -909,8 +1006,10 @@ void conservative_main(struct cpu_info *cpus, int nr_cpus)
 			if (!buffer) {
 				warn("fail to increase the buffer... continue");
 				buffer = old_buffer;
+				alloc_failed = 1;
 			} else {
 				buffer_size = config_buffer_size;
+				alloc_failed = 0;
 			}
 		}
 
@@ -924,6 +1023,7 @@ void conservative_main(struct cpu_info *cpus, int nr_cpus)
 			}
 		}
 
+		old_config_buffer_size = config_buffer_size;
 		if (backend->get) {
 			retval = backend->get(buffer, buffer_size);
 			if (!retval) {
@@ -932,6 +1032,20 @@ void conservative_main(struct cpu_info *cpus, int nr_cpus)
 			}
 		}
 
+		/*
+		 * If new value of config_buf_size is more than old one then
+		 * read_sched_debug function doubled its size,
+		 * this is done in 2 cases
+		 * 1. /proc/sched is not read completely
+		 * 2. buffer is almost full
+		 * (retval + 2 > old_config_buffer_size) condition is added to
+		 * avoid 2nd case
+		 */
+		if((config_buffer_size > old_config_buffer_size) &&
+		    !alloc_failed && (retval + 2 > old_config_buffer_size)) {
+			continue;
+		}
+
 		for (i = 0; i < nr_cpus; i++) {
 			if (!should_monitor(i))
 				continue;
@@ -1041,7 +1155,7 @@ void single_threaded_main(struct cpu_info *cpus, int nr_cpus)
 	int overloaded = 0;
 	int has_busy_cpu;
 	int boosted = 0;
-	int retval;
+	int retval = 0;
 	int i;
 
 	log_msg("single threaded mode\n");
@@ -1069,6 +1183,8 @@ void single_threaded_main(struct cpu_info *cpus, int nr_cpus)
 	}
 
 	while (running) {
+		int old_config_buffer_size;
+		int alloc_failed = 0;
 
 		/* Buffer size should increase. See sched_debug_get(). */
 		if (config_buffer_size != buffer_size) {
@@ -1077,8 +1193,10 @@ void single_threaded_main(struct cpu_info *cpus, int nr_cpus)
 			if (!buffer) {
 				warn("fail to increase the buffer... continue");
 				buffer = old_buffer;
+				alloc_failed = 1;
 			} else {
 				buffer_size = config_buffer_size;
+				alloc_failed = 0;
 			}
 		}
 
@@ -1092,6 +1210,7 @@ void single_threaded_main(struct cpu_info *cpus, int nr_cpus)
 			}
 		}
 
+		old_config_buffer_size = config_buffer_size;
 		if (backend->get) {
 			retval = backend->get(buffer, buffer_size);
 			if (!retval) {
@@ -1100,6 +1219,20 @@ void single_threaded_main(struct cpu_info *cpus, int nr_cpus)
 			}
 		}
 
+		/*
+		 * If new value of config_buf_size is more than old one then
+		 * read_sched_debug function doubled its size,
+		 * this is done in 2 cases
+		 * 1. /proc/sched is not read completely
+		 * 2. buffer is almost full
+		 * (retval + 2 > old_config_buffer_size) condition is added to
+		 * avoid 2nd case
+		 */
+		if((config_buffer_size > old_config_buffer_size) &&
+		    !alloc_failed && (retval + 2 > old_config_buffer_size)) {
+			continue;
+		}
+
 		for (i = 0; i < nr_cpus; i++) {
 			if (!should_monitor(i))
 				continue;
-- 
2.39.0


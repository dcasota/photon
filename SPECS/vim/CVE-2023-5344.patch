From 3bd7fa12e146c6051490d048a4acbfba974eeb04 Mon Sep 17 00:00:00 2001
From: Christian Brabandt <cb@256bit.org>
Date: Mon, 2 Oct 2023 20:59:08 +0200
Subject: [PATCH] patch 9.0.1969: [security] buffer-overflow in trunc_string()

Problem:  buffer-overflow in trunc_string()
Solution: Add NULL at end of buffer

Currently trunc_string() assumes that when the string is too long,
buf[e-1] will always be writeable. But that assumption may not always be
true. The condition currently looks like this

    else if (e + 3 < buflen)
    [...]
    else
    {
        // can't fit in the "...", just truncate it
        buf[e - 1] = NUL;
    }

but this means, we may run into the last else clause with e still being
larger than buflen. So a buffer overflow occurs.

So instead of using `buf[e - 1]`, let's just always
truncate at `buf[buflen - 1]` which should always be writable.

Signed-off-by: Christian Brabandt <cb@256bit.org>

[ssrish: resolved patch failure in test code hunk]
Signed-off-by: Srish Srinivasan <ssrish@vmware.com>
---
 src/message.c              | 2 +-
 src/testdir/test_crash.vim | 7 +++++++
 src/version.c              | 2 ++
 3 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/src/message.c b/src/message.c
index 2fc6cefa9ddf2..83c8b4f4a05fc 100644
--- a/src/message.c
+++ b/src/message.c
@@ -349,7 +349,7 @@ trunc_string(
     else
     {
 	// can't fit in the "...", just truncate it
-	buf[e - 1] = NUL;
+	buf[buflen - 1] = NUL;
     }
 }
 
diff --git a/src/testdir/test_crash.vim b/src/testdir/test_crash.vim
index a1da68ed4c7ad..5c83e3a2f5ffe 100644
--- a/src/testdir/test_crash.vim
+++ b/src/testdir/test_crash.vim
@@ -57,6 +57,12 @@ func Test_crash1()
     \ '  && echo "crash 7: [OK]" >> X_crash1_result.txt' .. "\<cr>")
   call TermWait(buf, 1000)
 
+  let file = 'crash/vim_msg_trunc_poc'
+  let args = printf(cmn_args, vim, file)
+  call term_sendkeys(buf, args ..
+    \ '  || echo "crash 8: [OK]" >> X_crash1_result.txt' .. "\<cr>")
+  call TermWait(buf, 3000)
+
   " clean up
   exe buf .. "bw!"
 
@@ -68,6 +74,7 @@ func Test_crash1()
       \ 'crash 3: [OK]',
       \ 'crash 4: [OK]',
       \ 'crash 5: [OK]',
+      \ 'crash 8: [OK]',
       \ ]
 
   call assert_equal(expected, getline(1, '$'))
diff --git a/src/version.c b/src/version.c
index 1be14627684c9..3056f35d7fe7e 100644
--- a/src/version.c
+++ b/src/version.c
@@ -735,6 +735,8 @@ static char *(features[]) =
 
 static int included_patches[] =
 {   /* Add new patch number below this line */
+/**/
+    1969,
 /**/
     1873,
 /**/


From 63cb3a8574632b4e2b9de7db560d50e1bacaac59 Mon Sep 17 00:00:00 2001
From: y5c4l3 <y5c4l3@proton.me>
Date: Wed, 25 Sep 2024 23:36:06 +0800
Subject: [PATCH] Quote template strings in activation script

This patch adds `quote` method in `ViaTemplateActivator` so that the
magic template strings can be quoted correctly when replacing. This
mitigates potential command injection (#2768).

Signed-off-by: y5c4l3 <y5c4l3@proton.me>

[prashant.singh-chauhan: Backported patch to 2.16.3]
Signed-off-by: Prashant S Chauhan <prashant.singh-chauhan@broadcom.com>

Exploit:
https://github.com/pypa/virtualenv/issues/2768
[ ~/';uname -a;': ]# . ./bin/activate
Linux dev2 6.1.10-10.ph5-esx #1-photon SMP Mon Apr 24 22:51:08 UTC 2023 x86_64 GNU/Linux
(test) [ ~/pkgs/test/';uname -a;': ]#

After fix:
[ ~/';uname -a;': ]# . ./bin/activate
(';uname -a;':) [ ~/';uname -a;': ]#

---
 pyproject.toml                                |  3
 src/virtualenv/activation/bash/activate.sh    |  8 +++----
 src/virtualenv/activation/batch/__init__.py   |  4 ++++
 src/virtualenv/activation/cshell/activate.csh |  8 +++----
 src/virtualenv/activation/fish/activate.fish  |  8 +++----
 src/virtualenv/activation/nushell/__init__.py | 19 +++++++++++++++++
 src/virtualenv/activation/nushell/activate.nu |  8 +++----
 .../activation/powershell/__init__.py         | 12 +++++++++++
 .../activation/powershell/activate.ps1        |  6 +++---
 src/virtualenv/activation/python/__init__.py  |  6 +++++-
 .../activation/python/activate_this.py        |  8 +++----
 src/virtualenv/activation/via_template.py     | 13 +++++++++++-
 tests/conftest.py                             |  6 +++++-
 tests/unit/activation/conftest.py             |  3 +--
 tests/unit/activation/test_batch.py           | 10 ++++-----
 tests/unit/activation/test_powershell.py      | 21 +++++++++++++------
 17 files changed, 106 insertions(+), 39 deletions(-)
 create mode 100644 docs/changelog/2768.bugfix.rst


diff --git a/pyproject.toml b/pyproject.toml
index b7a7ad8..756491c 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -16,3 +16,7 @@ directory = "docs/changelog"
 title_format = false
 issue_format = "`#{issue} <https://github.com/pypa/virtualenv/issues/{issue}>`_"
 template = "docs/changelog/template.jinja2"
+
+lint.per-file-ignores."src/virtualenv/activation/python/activate_this.py" = [
+  "F821", # ignore undefined template string placeholders
+]
diff --git a/src/virtualenv/activation/bash/activate.sh b/src/virtualenv/activation/bash/activate.sh
index fb40db6..5953052 100644
--- a/src/virtualenv/activation/bash/activate.sh
+++ b/src/virtualenv/activation/bash/activate.sh
@@ -44,14 +44,14 @@ deactivate () {
 # unset irrelevant variables
 deactivate nondestructive
 
-VIRTUAL_ENV='__VIRTUAL_ENV__'
+VIRTUAL_ENV=__VIRTUAL_ENV__
 if ([ "$OSTYPE" = "cygwin" ] || [ "$OSTYPE" = "msys" ]) && $(command -v cygpath &> /dev/null) ; then
     VIRTUAL_ENV=$(cygpath -u "$VIRTUAL_ENV")
 fi
 export VIRTUAL_ENV
 
 _OLD_VIRTUAL_PATH="$PATH"
-PATH="$VIRTUAL_ENV/__BIN_NAME__:$PATH"
+PATH="$VIRTUAL_ENV/"__BIN_NAME__":$PATH"
 export PATH
 
 # unset PYTHONHOME if set
@@ -62,8 +62,8 @@ fi
 
 if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT-}" ] ; then
     _OLD_VIRTUAL_PS1="${PS1-}"
-    if [ "x__VIRTUAL_PROMPT__" != x ] ; then
-        PS1="(__VIRTUAL_PROMPT__) ${PS1-}"
+    if [ "x"__VIRTUAL_PROMPT__ != x ] ; then
+        PS1=(__VIRTUAL_PROMPT__)" ""${PS1-}"
     else
         PS1="(`basename \"$VIRTUAL_ENV\"`) ${PS1-}"
     fi
diff --git a/src/virtualenv/activation/batch/__init__.py b/src/virtualenv/activation/batch/__init__.py
index 6c35337..3904be1 100644
--- a/src/virtualenv/activation/batch/__init__.py
+++ b/src/virtualenv/activation/batch/__init__.py
@@ -14,6 +14,10 @@ class BatchActivator(ViaTemplateActivator):
         yield Path("deactivate.bat")
         yield Path("pydoc.bat")
 
+    @staticmethod
+    def quote(string):
+        return string
+
     def instantiate_template(self, replacements, template, creator):
         # ensure the text has all newlines as \r\n - required by batch
         base = super().instantiate_template(replacements, template, creator)
diff --git a/src/virtualenv/activation/cshell/activate.csh b/src/virtualenv/activation/cshell/activate.csh
index 837dcda..f72879b 100644
--- a/src/virtualenv/activation/cshell/activate.csh
+++ b/src/virtualenv/activation/cshell/activate.csh
@@ -10,15 +10,15 @@ alias deactivate 'test $?_OLD_VIRTUAL_PATH != 0 && setenv PATH "$_OLD_VIRTUAL_PA
 # Unset irrelevant variables.
 deactivate nondestructive
 
-setenv VIRTUAL_ENV '__VIRTUAL_ENV__'
+setenv VIRTUAL_ENV __VIRTUAL_ENV__
 
 set _OLD_VIRTUAL_PATH="$PATH:q"
-setenv PATH "$VIRTUAL_ENV:q/__BIN_NAME__:$PATH:q"
+setenv PATH "$VIRTUAL_ENV:q/"__BIN_NAME__":$PATH:q"
 
 
 
-if ('__VIRTUAL_PROMPT__' != "") then
-    set env_name = '(__VIRTUAL_PROMPT__) '
+if (__VIRTUAL_PROMPT__ != "") then
+    set env_name = (__VIRTUAL_PROMPT__)
 else
     set env_name = '('"$VIRTUAL_ENV:t:q"') '
 endif
diff --git a/src/virtualenv/activation/fish/activate.fish b/src/virtualenv/activation/fish/activate.fish
index 62f631e..3637d55 100644
--- a/src/virtualenv/activation/fish/activate.fish
+++ b/src/virtualenv/activation/fish/activate.fish
@@ -57,7 +57,7 @@ end
 # Unset irrelevant variables.
 deactivate nondestructive
 
-set -gx VIRTUAL_ENV '__VIRTUAL_ENV__'
+set -gx VIRTUAL_ENV __VIRTUAL_ENV__
 
 # https://github.com/fish-shell/fish-shell/issues/436 altered PATH handling
 if test (echo $FISH_VERSION | head -c 1) -lt 3
@@ -65,7 +65,7 @@ if test (echo $FISH_VERSION | head -c 1) -lt 3
 else
     set -gx _OLD_VIRTUAL_PATH $PATH
 end
-set -gx PATH "$VIRTUAL_ENV"'/__BIN_NAME__' $PATH
+set -gx PATH "$VIRTUAL_ENV"'/'__BIN_NAME__ $PATH
 
 # Unset `$PYTHONHOME` if set.
 if set -q PYTHONHOME
@@ -87,8 +87,8 @@ if test -z "$VIRTUAL_ENV_DISABLE_PROMPT"
 
         # Prompt override provided?
         # If not, just prepend the environment name.
-        if test -n '__VIRTUAL_PROMPT__'
-            printf '(%s) ' '__VIRTUAL_PROMPT__'
+        if test -n __VIRTUAL_PROMPT__
+            printf '(%s) ' __VIRTUAL_PROMPT__
         else
             printf '(%s) ' (basename "$VIRTUAL_ENV")
         end
diff --git a/src/virtualenv/activation/nushell/__init__.py b/src/virtualenv/activation/nushell/__init__.py
index 839c19c..1319fc4 100644
--- a/src/virtualenv/activation/nushell/__init__.py
+++ b/src/virtualenv/activation/nushell/__init__.py
@@ -9,6 +9,25 @@ class NushellActivator(ViaTemplateActivator):
         yield Path("activate.nu")
         yield Path("deactivate.nu")
 
+    @staticmethod
+    def quote(string):
+        """
+        Nushell supports raw strings like: r###'this is a string'###.
+    
+        This method finds the maximum continuous sharps in the string and then
+        quote it with an extra sharp.
+        """
+        max_sharps = 0
+        current_sharps = 0
+        for char in string:
+            if char == "#":
+                current_sharps += 1
+                max_sharps = max(current_sharps, max_sharps)
+            else:
+                current_sharps = 0
+        wrapping = "#" * (max_sharps + 1)
+        return f"r{wrapping}'{string}'{wrapping}"
+
     def replacements(self, creator, dest_folder):
         # Due to nushell scoping, it isn't easy to create a function that will
         # deactivate the environment. For that reason a __DEACTIVATE_PATH__
diff --git a/src/virtualenv/activation/nushell/activate.nu b/src/virtualenv/activation/nushell/activate.nu
index 48c85b4..bc82d59 100644
--- a/src/virtualenv/activation/nushell/activate.nu
+++ b/src/virtualenv/activation/nushell/activate.nu
@@ -9,8 +9,8 @@ def-env activate-virtualenv [] {
     }
 
     let is_windows = ((sys).host.name | str downcase) == 'windows'
-    let virtual_env = '__VIRTUAL_ENV__'
-    let bin = '__BIN_NAME__'
+    let virtual_env = __VIRTUAL_ENV__
+    let bin = __BIN_NAME__
     let path_sep = '__PATH_SEP__'
     let path_name = if $is_windows {
         if (has-env 'Path') {
@@ -43,10 +43,10 @@ def-env activate-virtualenv [] {
     let new_path = ($old_path | prepend $venv_path | str collect $path_sep)
 
     # Creating the new prompt for the session
-    let virtual_prompt = if ('__VIRTUAL_PROMPT__' == '') {
+    let virtual_prompt = if (__VIRTUAL_PROMPT__ == '') {
         $'(char lparen)($virtual_env | path basename)(char rparen) '
     } else {
-        '(__VIRTUAL_PROMPT__) '
+        (__VIRTUAL_PROMPT__)
     }
 
     # Back up the old prompt builder
diff --git a/src/virtualenv/activation/powershell/__init__.py b/src/virtualenv/activation/powershell/__init__.py
index 6d561bf..bdd7f29 100644
--- a/src/virtualenv/activation/powershell/__init__.py
+++ b/src/virtualenv/activation/powershell/__init__.py
@@ -7,6 +7,17 @@ class PowerShellActivator(ViaTemplateActivator):
     def templates(self):
         yield Path("activate.ps1")
 
+    @staticmethod
+    def quote(string):
+        """
+        This should satisfy PowerShell quoting rules [1], unless the quoted
+        string is passed directly to Windows native commands [2].
+
+        [1]: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_quoting_rules
+        [2]: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing#passing-arguments-that-contain-quote-characters
+        """  # noqa: D205
+        string = string.replace("'", "''")
+        return f"'{string}'"
 
 __all__ = [
     "PowerShellActivator",
diff --git a/src/virtualenv/activation/powershell/activate.ps1 b/src/virtualenv/activation/powershell/activate.ps1
index d524347..079888d 100644
--- a/src/virtualenv/activation/powershell/activate.ps1
+++ b/src/virtualenv/activation/powershell/activate.ps1
@@ -35,18 +35,18 @@ $env:VIRTUAL_ENV = $VIRTUAL_ENV
 
 New-Variable -Scope global -Name _OLD_VIRTUAL_PATH -Value $env:PATH
 
-$env:PATH = "$env:VIRTUAL_ENV/__BIN_NAME____PATH_SEP__" + $env:PATH
+$env:PATH = "$env:VIRTUAL_ENV/" + __BIN_NAME__ + __PATH_SEP__ + $env:PATH
 if (!$env:VIRTUAL_ENV_DISABLE_PROMPT) {
     function global:_old_virtual_prompt {
         ""
     }
     $function:_old_virtual_prompt = $function:prompt
 
-    if ("__VIRTUAL_PROMPT__" -ne "") {
+    if (__VIRTUAL_PROMPT__ -ne "") {
         function global:prompt {
             # Add the custom prefix to the existing prompt
             $previous_prompt_value = & $function:_old_virtual_prompt
-            ("(__VIRTUAL_PROMPT__) " + $previous_prompt_value)
+            ((__VIRTUAL_PROMPT__) + " " + $previous_prompt_value)
         }
     }
     else {
diff --git a/src/virtualenv/activation/python/__init__.py b/src/virtualenv/activation/python/__init__.py
index ad38201..ae26f6f 100644
--- a/src/virtualenv/activation/python/__init__.py
+++ b/src/virtualenv/activation/python/__init__.py
@@ -10,6 +10,10 @@ class PythonActivator(ViaTemplateActivator):
     def templates(self):
         yield Path("activate_this.py")
 
+    @staticmethod
+    def quote(string):
+        return repr(string)
+
     def replacements(self, creator, dest_folder):
         replacements = super().replacements(creator, dest_folder)
         lib_folders = OrderedDict((os.path.relpath(str(i), str(dest_folder)), None) for i in creator.libs)
diff --git a/src/virtualenv/activation/python/activate_this.py b/src/virtualenv/activation/python/activate_this.py
index e8eeb84..976952e 100644
--- a/src/virtualenv/activation/python/activate_this.py
+++ b/src/virtualenv/activation/python/activate_this.py
@@ -14,7 +14,7 @@ except NameError:
     raise AssertionError("You must use exec(open(this_file).read(), {'__file__': this_file}))")
 
 bin_dir = os.path.dirname(abs_file)
-base = bin_dir[: -len("__BIN_NAME__") - 1]  # strip away the bin part from the __file__, plus the path separator
+base = bin_dir[: -len(__BIN_NAME__) - 1]  # strip away the bin part from the __file__, plus the path separator
 
 # prepend bin to PATH (this file is inside the bin directory)
 os.environ["PATH"] = os.pathsep.join([bin_dir] + os.environ.get("PATH", "").split(os.pathsep))
@@ -22,9 +22,9 @@ os.environ["VIRTUAL_ENV"] = base  # virtual env is right above bin directory
 
 # add the virtual environments libraries to the host python import mechanism
 prev_length = len(sys.path)
-for lib in "__LIB_FOLDERS__".split(os.pathsep):
+for lib in __LIB_FOLDERS__.split(os.pathsep):
     path = os.path.realpath(os.path.join(bin_dir, lib))
-    site.addsitedir(path.decode("utf-8") if "__DECODE_PATH__" else path)
+    site.addsitedir(path.decode("utf-8") if __DECODE_PATH__ else path)
 sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]
 
 sys.real_prefix = sys.prefix
diff --git a/src/virtualenv/activation/via_template.py b/src/virtualenv/activation/via_template.py
index bfb9744..16d75b9 100644
--- a/src/virtualenv/activation/via_template.py
+++ b/src/virtualenv/activation/via_template.py
@@ -1,4 +1,5 @@
 import os
+import shlex
 import sys
 from abc import ABCMeta, abstractmethod
 
@@ -15,6 +16,16 @@ class ViaTemplateActivator(Activator, metaclass=ABCMeta):
     def templates(self):
         raise NotImplementedError
 
+    @staticmethod
+    def quote(string):
+        """
+        Quote strings in the activation script.
+
+        :param string: the string to quote
+        :return: quoted string that works in the activation script
+        """
+        return shlex.quote(string)
+
     def generate(self, creator):
         dest_folder = creator.bin_dir
         replacements = self.replacements(creator, dest_folder)
@@ -51,7 +62,7 @@ class ViaTemplateActivator(Activator, metaclass=ABCMeta):
         text = binary.decode("utf-8", errors="strict")
         for key, value in replacements.items():
             value = self._repr_unicode(creator, value)
-            text = text.replace(key, value)
+            text = text.replace(key, self.quote(value))
         return text
 
     @staticmethod
diff --git a/tests/conftest.py b/tests/conftest.py
index 68924dc..f922460 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -292,7 +292,11 @@ def is_inside_ci():
 
 @pytest.fixture(scope="session")
 def special_char_name():
-    base = "e-$ èрт🚒♞中片-j"
+    base = "'\";&&e-$ èрт🚒♞中片-j"
+    if IS_WIN:
+        # get rid of invalid characters on Windows
+        base = base.replace('"', "")
+        base = base.replace(";", "")
     # workaround for pypy3 https://bitbucket.org/pypy/pypy/issues/3147/venv-non-ascii-support-windows
     encoding = "ascii" if IS_WIN else sys.getfilesystemencoding()
     # let's not include characters that the file system cannot encode)
diff --git a/tests/unit/activation/conftest.py b/tests/unit/activation/conftest.py
index d9e76d0..06ca25d 100644
--- a/tests/unit/activation/conftest.py
+++ b/tests/unit/activation/conftest.py
@@ -4,7 +4,6 @@ import subprocess
 import sys
 from os.path import dirname, normcase
 from pathlib import Path
-from shlex import quote
 from subprocess import Popen
 
 import pytest
@@ -145,7 +144,7 @@ class ActivationTester:
         assert out[-1] == "None", raw
 
     def quote(self, s):
-        return quote(s)
+        return self.of_class.quote(s)
 
     def python_cmd(self, cmd):
         return f"{os.path.basename(sys.executable)} -c {self.quote(cmd)}"
diff --git a/tests/unit/activation/test_batch.py b/tests/unit/activation/test_batch.py
index 1d951b2..1f7f9d8 100644
--- a/tests/unit/activation/test_batch.py
+++ b/tests/unit/activation/test_batch.py
@@ -1,5 +1,3 @@
-from shlex import quote
-
 import pytest
 
 from virtualenv.activation import BatchActivator
@@ -25,10 +23,12 @@ def test_batch(activation_tester_class, activation_tester, tmp_path):
             return ["@echo off", "", "chcp 65001 1>NUL"] + super()._get_test_lines(activate_script)
 
         def quote(self, s):
-            """double quotes needs to be single, and single need to be double"""
-            return "".join(("'" if c == '"' else ('"' if c == "'" else c)) for c in quote(s))
+            if '"' in s or " " in s:
+                text = s.replace('"', r"\"")
+                return f'"{text}"'
+            return s
 
         def print_prompt(self):
-            return "echo %PROMPT%"
+            return 'echo "%PROMPT%"'
 
     activation_tester(Batch)
diff --git a/tests/unit/activation/test_powershell.py b/tests/unit/activation/test_powershell.py
index 761237f..f495353 100644
--- a/tests/unit/activation/test_powershell.py
+++ b/tests/unit/activation/test_powershell.py
@@ -1,5 +1,4 @@
 import sys
-from shlex import quote
 
 import pytest
 
@@ -19,10 +18,6 @@ def test_powershell(activation_tester_class, activation_tester, monkeypatch):
             self.activate_cmd = "."
             self.script_encoding = "utf-16"
 
-        def quote(self, s):
-            """powershell double quote needed for quotes within single quotes"""
-            return quote(s).replace('"', '""')
-
         def _get_test_lines(self, activate_script):
             # for BATCH utf-8 support need change the character code page to 650001
             return super()._get_test_lines(activate_script)
@@ -33,4 +28,19 @@ def test_powershell(activation_tester_class, activation_tester, monkeypatch):
         def print_prompt(self):
             return "prompt"
 
+        def quote(self, s):
+            """
+            Tester will pass strings to native commands on Windows so extra
+            parsing rules are used. Check `PowerShellActivator.quote` for more
+            details.
+            """
+            text = PowerShellActivator.quote(s)
+            return text.replace('"', '""') if sys.platform == "win32" else text
+
+        def activate_call(self, script):
+            # Commands are called without quotes in PowerShell
+            cmd = self.activate_cmd
+            scr = self.quote(str(script))
+            return f"{cmd} {scr}".strip()
+
     activation_tester(PowerShell)

From d375d6dc43c5a7f259644d9ac8eb118ebedc3c1e Mon Sep 17 00:00:00 2001
From: Rui Chen <rui@chenrui.dev>
Date: Mon, 26 Dec 2022 01:29:57 -0500
Subject: [PATCH] build: update executor and tests

Signed-off-by: Rui Chen <rui@chenrui.dev>
---
 task/backend/executor/executor.go      |  2 +-
 task/backend/executor/executor_test.go | 28 +++++++++++++-------------
 task/backend/executor/support_test.go  | 18 ++++++++---------
 3 files changed, 24 insertions(+), 24 deletions(-)

diff --git a/task/backend/executor/executor.go b/task/backend/executor/executor.go
index 772e9f145..6af2082d4 100644
--- a/task/backend/executor/executor.go
+++ b/task/backend/executor/executor.go
@@ -583,7 +583,7 @@ func exhaustResultIterators(res flux.Result) error {
 
 // NewASTCompiler parses a Flux query string into an AST representation.
 func NewASTCompiler(ctx context.Context, query string, ts CompilerBuilderTimestamps) (flux.Compiler, error) {
-	pkg, err := runtime.ParseToJSON(query)
+	pkg, err := runtime.ParseToJSON(ctx, query)
 	if err != nil {
 		return nil, err
 	}
diff --git a/task/backend/executor/executor_test.go b/task/backend/executor/executor_test.go
index 7652d27c3..c038eb45e 100644
--- a/task/backend/executor/executor_test.go
+++ b/task/backend/executor/executor_test.go
@@ -118,8 +118,8 @@ func testQuerySuccess(t *testing.T) {
 		t.Fatalf("did not correctly set RunAt value, got: %v", run.RunAt)
 	}
 
-	tes.svc.WaitForQueryLive(t, script)
-	tes.svc.SucceedQuery(script)
+	tes.svc.WaitForQueryLive(ctx, t, script)
+	tes.svc.SucceedQuery(ctx, script)
 
 	<-promise.Done()
 
@@ -177,8 +177,8 @@ func testQueryFailure(t *testing.T) {
 		t.Fatal("promise and run dont match")
 	}
 
-	tes.svc.WaitForQueryLive(t, script)
-	tes.svc.FailQuery(script, errors.New("blargyblargblarg"))
+	tes.svc.WaitForQueryLive(ctx, t, script)
+	tes.svc.FailQuery(ctx, script, errors.New("blargyblargblarg"))
 
 	<-promise.Done()
 
@@ -226,8 +226,8 @@ func testManualRun(t *testing.T) {
 		t.Fatal("promise and run and manual run dont match")
 	}
 
-	tes.svc.WaitForQueryLive(t, script)
-	tes.svc.SucceedQuery(script)
+	tes.svc.WaitForQueryLive(ctx, t, script)
+	tes.svc.SucceedQuery(ctx, script)
 
 	if got := promise.Error(); got != nil {
 		t.Fatal(got)
@@ -269,8 +269,8 @@ func testResumingRun(t *testing.T) {
 		t.Fatal("promise and run and manual run dont match")
 	}
 
-	tes.svc.WaitForQueryLive(t, script)
-	tes.svc.SucceedQuery(script)
+	tes.svc.WaitForQueryLive(ctx, t, script)
+	tes.svc.SucceedQuery(ctx, script)
 
 	if got := promise.Error(); got != nil {
 		t.Fatal(got)
@@ -297,8 +297,8 @@ func testWorkerLimit(t *testing.T) {
 		t.Fatal("expected a worker to be started")
 	}
 
-	tes.svc.WaitForQueryLive(t, script)
-	tes.svc.FailQuery(script, errors.New("blargyblargblarg"))
+	tes.svc.WaitForQueryLive(ctx, t, script)
+	tes.svc.FailQuery(ctx, script, errors.New("blargyblargblarg"))
 
 	<-promise.Done()
 
@@ -370,13 +370,13 @@ func testMetrics(t *testing.T) {
 	assert.NoError(t, err)
 	assert.EqualValues(t, promiseID, run.ID, "promise and run dont match")
 
-	tes.svc.WaitForQueryLive(t, script)
+	tes.svc.WaitForQueryLive(ctx, t, script)
 
 	mg = promtest.MustGather(t, reg)
 	m = promtest.MustFindMetric(t, mg, "task_executor_total_runs_active", nil)
 	assert.EqualValues(t, 1, *m.Gauge.Value, "unexpected number of active runs")
 
-	tes.svc.SucceedQuery(script)
+	tes.svc.SucceedQuery(ctx, script)
 	<-promise.Done()
 
 	// N.B. You might think the _runs_complete and _runs_active metrics are updated atomically,
@@ -455,8 +455,8 @@ func testIteratorFailure(t *testing.T) {
 		t.Fatal("promise and run dont match")
 	}
 
-	tes.svc.WaitForQueryLive(t, script)
-	tes.svc.SucceedQuery(script)
+	tes.svc.WaitForQueryLive(ctx, t, script)
+	tes.svc.SucceedQuery(ctx, script)
 
 	<-promise.Done()
 
diff --git a/task/backend/executor/support_test.go b/task/backend/executor/support_test.go
index 3465c210c..5f861f856 100644
--- a/task/backend/executor/support_test.go
+++ b/task/backend/executor/support_test.go
@@ -25,8 +25,8 @@ type fakeQueryService struct {
 	mostRecentCtx context.Context
 }
 
-func makeAST(q string) lang.ASTCompiler {
-	pkg, err := runtime.ParseToJSON(q)
+func makeAST(ctx context.Context, q string) lang.ASTCompiler {
+	pkg, err := runtime.ParseToJSON(ctx, q)
 	if err != nil {
 		panic(err)
 	}
@@ -75,12 +75,12 @@ func (s *fakeQueryService) Query(ctx context.Context, compiler flux.Compiler) (f
 }
 
 // SucceedQuery allows the running query matching the given script to return on its Ready channel.
-func (s *fakeQueryService) SucceedQuery(script string) {
+func (s *fakeQueryService) SucceedQuery(ctx context.Context, script string) {
 	s.mu.Lock()
 	defer s.mu.Unlock()
 
 	// Unblock the flux.
-	ast := makeAST(script)
+	ast := makeAST(ctx, script)
 	spec := makeASTString(ast)
 	fq, ok := s.queries[spec]
 	if !ok {
@@ -93,12 +93,12 @@ func (s *fakeQueryService) SucceedQuery(script string) {
 }
 
 // FailQuery closes the running query's Ready channel and sets its error to the given value.
-func (s *fakeQueryService) FailQuery(script string, forced error) {
+func (s *fakeQueryService) FailQuery(ctx context.Context, script string, forced error) {
 	s.mu.Lock()
 	defer s.mu.Unlock()
 
 	// Unblock the flux.
-	ast := makeAST(script)
+	ast := makeAST(ctx, script)
 	spec := makeASTString(ast)
 	fq, ok := s.queries[spec]
 	if !ok {
@@ -119,12 +119,12 @@ func (s *fakeQueryService) FailNextQuery(forced error) {
 // WaitForQueryLive ensures that the query has made it into the service.
 // This is particularly useful for the synchronous executor,
 // because the execution starts on a separate goroutine.
-func (s *fakeQueryService) WaitForQueryLive(t *testing.T, script string) {
+func (s *fakeQueryService) WaitForQueryLive(ctx context.Context, t *testing.T, script string) {
 	t.Helper()
 
 	const attempts = 100
-	ast := makeAST(script)
-	astUTC := makeAST(script)
+	ast := makeAST(ctx, script)
+	astUTC := makeAST(ctx, script)
 	astUTC.Now = ast.Now.UTC()
 	spec := makeASTString(ast)
 	specUTC := makeASTString(astUTC)


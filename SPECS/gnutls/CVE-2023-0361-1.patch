From a74fc2b7c7de520459984a2335468258ec3fc15c Mon Sep 17 00:00:00 2001
From: Alexander Sosedkin <asosedkin@redhat.com>
Date: Tue, 9 Aug 2022 16:05:53 +0200
Subject: [PATCH 1/2] auth/rsa: side-step potential side-channel

Remove branching that depends on secret data.

Signed-off-by: Alexander Sosedkin <asosedkin@redhat.com>
Signed-off-by: Hubert Kario <hkario@redhat.com>
Tested-by: Hubert Kario <hkario@redhat.com>

[sshedi: ported fix to Photon's gnutls]
Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 lib/auth/rsa.c | 14 ++------------
 1 file changed, 2 insertions(+), 12 deletions(-)

diff --git a/lib/auth/rsa.c b/lib/auth/rsa.c
index 8108ee8..bd2a5a8 100644
--- a/lib/auth/rsa.c
+++ b/lib/auth/rsa.c
@@ -155,7 +155,6 @@ static int
 proc_rsa_client_kx(gnutls_session_t session, uint8_t * data,
 		   size_t _data_size)
 {
-	const char attack_error[] = "auth_rsa: Possible PKCS #1 attack\n";
 	gnutls_datum_t ciphertext;
 	int ret, dsize;
 	ssize_t data_size = _data_size;
@@ -165,7 +164,7 @@ proc_rsa_client_kx(gnutls_session_t session, uint8_t * data,
 
 #ifdef ENABLE_SSL3
 	if (get_num_version(session) == GNUTLS_SSL3) {
-		/* SSL 3.0 
+		/* SSL 3.0
 		 */
 		ciphertext.data = data;
 		ciphertext.size = data_size;
@@ -235,15 +234,6 @@ proc_rsa_client_kx(gnutls_session_t session, uint8_t * data,
 	ok &= CONSTCHECK_NOT_EQUAL(check_ver_min, 0) &
 	        CONSTCHECK_EQUAL(session->key.key.data[1], ver_min);
 
-	if (ok) {
-		/* call logging function unconditionally so all branches are
-		 * indistinguishable for timing and cache access when debug
-		 * logging is disabled */
-		_gnutls_no_log("%s", attack_error);
-	} else {
-		_gnutls_debug_log("%s", attack_error);
-	}
-
 	/* This is here to avoid the version check attack
 	 * discussed above.
 	 */
@@ -255,7 +245,7 @@ proc_rsa_client_kx(gnutls_session_t session, uint8_t * data,
 
 
 
-/* return RSA(random) using the peers public key 
+/* return RSA(random) using the peers public key
  */
 int
 _gnutls_gen_rsa_client_kx(gnutls_session_t session,
-- 
2.39.1


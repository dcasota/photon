From b6321de066a8cea8fbe7166d1c51a42342ee9ec9 Mon Sep 17 00:00:00 2001
From: Brennan Lamoreaux <brennan.lamoreaux@broadcom.com>
Date: Thu, 5 Dec 2024 18:40:04 +0000
Subject: [PATCH 3/3] patch-hook: fix cast errors

Livepatch callbacks are packed into specific sections
by gcc by the macros defined in kpatch-macros.h. Callbacks
take the form of:

	struct example {
		type *(fn)(struct klp_object *obj);
		char* objname;
	}

However, create-diff-objects.c can't include the kernel livepatch
header because it is compiled separately from the kernel module.
So the solution before was to define the structs in the header file as:

	struct example {
                type *(fn)(void *obj);
                char* objname;
        }

and then cast fn to (type *(fn)(struct klp_object *obj)) if necessary.
This way, the same header file and definitions can be used in
both places.

But! If compiled with the right GCC flags, such as -Wbad-function-cast,
this may throw an error during livepatch building. This is the error
I am seeing in Photon.

Solution: Remove the casts and properly define the structs in
the first place, accordingly with how they are packed into the
section(s) in kpatch-macros.h.

IMPORTANT: For correctness, this change requires proper ordering of include
statements! kpatch-patch.h must always be included AFTER linux/livepatch.h
(if using linux/livepatch.h).

Signed-off-by: Brennan Lamoreaux <brennan.lamoreaux@broadcom.com>
---
 kmod/patch/kpatch-patch-hook.c    |  1 +
 kmod/patch/kpatch-patch.h         | 29 +++++++++++++++++++++++++----
 kmod/patch/livepatch-patch-hook.c | 12 ++++--------
 3 files changed, 30 insertions(+), 12 deletions(-)

diff --git a/kmod/patch/kpatch-patch-hook.c b/kmod/patch/kpatch-patch-hook.c
index 92f101d..e77004d 100644
--- a/kmod/patch/kpatch-patch-hook.c
+++ b/kmod/patch/kpatch-patch-hook.c
@@ -24,6 +24,7 @@
 #include <linux/slab.h>
 #include <linux/kallsyms.h>
 #include "kpatch.h"
+#include <linux/livepatch.h>
 #include "kpatch-patch.h"
 
 static bool replace;
diff --git a/kmod/patch/kpatch-patch.h b/kmod/patch/kpatch-patch.h
index da4f6a0..f6b672e 100644
--- a/kmod/patch/kpatch-patch.h
+++ b/kmod/patch/kpatch-patch.h
@@ -22,6 +22,8 @@
 #ifndef _KPATCH_PATCH_H_
 #define _KPATCH_PATCH_H_
 
+#include <linux/version.h>
+
 struct kpatch_patch_func {
 	unsigned long new_addr;
 	unsigned long new_size;
@@ -43,20 +45,39 @@ struct kpatch_patch_dynrela {
 	long addend;
 };
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 15, 0)
+/* Callbacks present */
+/* IMPORTANT: include ordering is critical! */
+# ifdef _LINUX_LIVEPATCH_H_
+typedef struct klp_object klp_obj;
+# else
+/*
+ * Basically just  a placeholder for when we can't include linux/livepatch.h.
+ * The correct type, which is what gets packed in the section, is
+ * struct klp_object.
+ */
+typedef void klp_obj;
+# endif /* _LINUX_LIVEPATCH_H_ */
+#else
+/* Callbacks not present */
+#include "kpatch.h"
+typedef struct kpatch_object klp_obj;
+#endif
+
 struct kpatch_pre_patch_callback {
-	int (*callback)(void *obj);
+	int (*callback)(klp_obj *obj);
 	char *objname;
 };
 struct kpatch_post_patch_callback {
-	void (*callback)(void *obj);
+	void (*callback)(klp_obj *obj);
 	char *objname;
 };
 struct kpatch_pre_unpatch_callback {
-	void (*callback)(void *obj);
+	void (*callback)(klp_obj *obj);
 	char *objname;
 };
 struct kpatch_post_unpatch_callback {
-	void (*callback)(void *obj);
+	void (*callback)(klp_obj *obj);
 	char *objname;
 };
 
diff --git a/kmod/patch/livepatch-patch-hook.c b/kmod/patch/livepatch-patch-hook.c
index 3d13ab9..33adce5 100644
--- a/kmod/patch/livepatch-patch-hook.c
+++ b/kmod/patch/livepatch-patch-hook.c
@@ -356,8 +356,7 @@ static int add_callbacks_to_patch_objects(void)
 				object->name ? object->name : "vmlinux");
 			return -EINVAL;
 		}
-		object->callbacks.pre_patch = (int (*)(struct klp_object *))
-					       p_pre_patch_callback->callback;
+		object->callbacks.pre_patch = p_pre_patch_callback->callback;
 	}
 
 	for (p_post_patch_callback = __kpatch_callbacks_post_patch;
@@ -371,8 +370,7 @@ static int add_callbacks_to_patch_objects(void)
 				object->name ? object->name : "vmlinux");
 			return -EINVAL;
 		}
-		object->callbacks.post_patch = (void (*)(struct klp_object *))
-						p_post_patch_callback->callback;
+		object->callbacks.post_patch = p_post_patch_callback->callback;
 	}
 
 	for (p_pre_unpatch_callback = __kpatch_callbacks_pre_unpatch;
@@ -386,8 +384,7 @@ static int add_callbacks_to_patch_objects(void)
 				object->name ? object->name : "vmlinux");
 			return -EINVAL;
 		}
-		object->callbacks.pre_unpatch = (void (*)(struct klp_object *))
-						p_pre_unpatch_callback->callback;
+		object->callbacks.pre_unpatch = p_pre_unpatch_callback->callback;
 	}
 
 	for (p_post_unpatch_callback = __kpatch_callbacks_post_unpatch;
@@ -401,8 +398,7 @@ static int add_callbacks_to_patch_objects(void)
 				object->name ? object->name : "vmlinux");
 			return -EINVAL;
 		}
-		object->callbacks.post_unpatch = (void (*)(struct klp_object *))
-						p_post_unpatch_callback->callback;
+		object->callbacks.post_unpatch = p_post_unpatch_callback->callback;
 	}
 
 	return 0;
-- 
2.39.4


From b103ed5929f3b51b1e75902a19773ef038e65b57 Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Fri, 24 Jun 2022 20:01:38 +0530
Subject: [PATCH 4/4] sinkport

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 bridge/link.c                | 26 +++++++++++++--
 include/uapi/linux/if_link.h |  1 +
 ip/iplink_bridge_slave.c     | 65 +++++++++++++++++++++---------------
 3 files changed, 63 insertions(+), 29 deletions(-)

diff --git a/bridge/link.c b/bridge/link.c
index fef3a9e..b421f8c 100644
--- a/bridge/link.c
+++ b/bridge/link.c
@@ -16,6 +16,7 @@
 #include "libnetlink.h"
 #include "utils.h"
 #include "br_common.h"
+#include "hcx_helpers.h"
 
 static unsigned int filter_index;
 
@@ -183,7 +184,10 @@ static void print_protinfo(FILE *fp, struct rtattr *attr)
 				     rta_getattr_u8(prtb[IFLA_BRPORT_ISOLATED]));
 		if (prtb[IFLA_BRPORT_LOCKED])
 			print_on_off(PRINT_ANY, "locked", "locked %s ",
-				     rta_getattr_u8(prtb[IFLA_BRPORT_LOCKED]));
+					 rta_getattr_u8(prtb[IFLA_BRPORT_LOCKED]));
+		if (get_arp_probe() && prtb[IFLA_BRPORT_SINK_CONNECTED])
+			print_on_off(PRINT_ANY, "sink_connected", "sink_connected %s",
+					rta_getattr_u8(prtb[IFLA_BRPORT_SINK_CONNECTED]));
 	} else
 		print_stp_state(rta_getattr_u8(attr));
 }
@@ -274,7 +278,12 @@ static void usage(void)
 		"                               [ root_block {on | off} ]\n"
 		"                               [ learning {on | off} ]\n"
 		"                               [ learning_sync {on | off} ]\n"
-		"                               [ flood {on | off} ]\n"
+		"                               [ flood {on | off} ]\n");
+
+	if (get_arp_probe())
+		fprintf(stderr, "                               [ sink_connected {on | off} ]\n");
+
+	fprintf(stderr,
 		"                               [ mcast_router MULTICAST_ROUTER ]\n"
 		"                               [ mcast_flood {on | off} ]\n"
 		"                               [ bcast_flood {on | off} ]\n"
@@ -287,6 +296,7 @@ static void usage(void)
 		"                               [ backup_port DEVICE ] [ nobackup_port ]\n"
 		"                               [ self ] [ master ]\n"
 		"       bridge link show [dev DEV]\n");
+
 	exit(-1);
 }
 
@@ -326,6 +336,7 @@ static int brlink_modify(int argc, char **argv)
 	__u16 flags = 0;
 	struct rtattr *nest;
 	int ret;
+	__s8 sink_connected = -1;
 
 	while (argc > 0) {
 		if (strcmp(*argv, "dev") == 0) {
@@ -366,6 +377,11 @@ static int brlink_modify(int argc, char **argv)
 			flood = parse_on_off("flood", *argv, &ret);
 			if (ret)
 				return ret;
+		} else if (get_arp_probe() && strcmp(*argv, "sink_connected") == 0) {
+			NEXT_ARG();
+			sink_connected = parse_on_off("sink_connected", *argv, &ret);
+			if (ret)
+				return ret;
 		} else if (strcmp(*argv, "mcast_router") == 0) {
 			NEXT_ARG();
 			mcast_router = atoi(*argv);
@@ -499,7 +515,11 @@ static int brlink_modify(int argc, char **argv)
 		addattr8(&req.n, sizeof(req), IFLA_BRPORT_LEARNING, learning);
 	if (learning_sync >= 0)
 		addattr8(&req.n, sizeof(req), IFLA_BRPORT_LEARNING_SYNC,
-			 learning_sync);
+				learning_sync);
+
+	if (get_arp_probe() && sink_connected >= 0)
+		addattr8(&req.n, sizeof(req), IFLA_BRPORT_SINK_CONNECTED,
+				sink_connected);
 
 	if (cost > 0)
 		addattr32(&req.n, sizeof(req), IFLA_BRPORT_COST, cost);
diff --git a/include/uapi/linux/if_link.h b/include/uapi/linux/if_link.h
index e0fbbfe..c165e50 100644
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@ -558,6 +558,7 @@ enum {
 	IFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT,
 	IFLA_BRPORT_MCAST_EHT_HOSTS_CNT,
 	IFLA_BRPORT_LOCKED,
+	IFLA_BRPORT_SINK_CONNECTED, /* port connected to sink device */
 	__IFLA_BRPORT_MAX
 };
 #define IFLA_BRPORT_MAX (__IFLA_BRPORT_MAX - 1)
diff --git a/ip/iplink_bridge_slave.c b/ip/iplink_bridge_slave.c
index 98d1721..dbcfb14 100644
--- a/ip/iplink_bridge_slave.c
+++ b/ip/iplink_bridge_slave.c
@@ -18,34 +18,39 @@
 #include "rt_names.h"
 #include "utils.h"
 #include "ip_common.h"
+#include "hcx_helpers.h"
 
 static void print_explain(FILE *f)
 {
 	fprintf(f,
-		"Usage: ... bridge_slave [ fdb_flush ]\n"
-		"			[ state STATE ]\n"
-		"			[ priority PRIO ]\n"
-		"			[ cost COST ]\n"
-		"			[ guard {on | off} ]\n"
-		"			[ hairpin {on | off} ]\n"
-		"			[ fastleave {on | off} ]\n"
-		"			[ root_block {on | off} ]\n"
-		"			[ learning {on | off} ]\n"
-		"			[ flood {on | off} ]\n"
-		"			[ proxy_arp {on | off} ]\n"
-		"			[ proxy_arp_wifi {on | off} ]\n"
-		"			[ mcast_router MULTICAST_ROUTER ]\n"
-		"			[ mcast_fast_leave {on | off} ]\n"
-		"			[ mcast_flood {on | off} ]\n"
-		"			[ bcast_flood {on | off} ]\n"
-		"			[ mcast_to_unicast {on | off} ]\n"
-		"			[ group_fwd_mask MASK ]\n"
-		"			[ neigh_suppress {on | off} ]\n"
-		"			[ vlan_tunnel {on | off} ]\n"
-		"			[ isolated {on | off} ]\n"
-		"			[ locked {on | off} ]\n"
-		"			[ backup_port DEVICE ] [ nobackup_port ]\n"
-	);
+			"Usage: ... bridge_slave [ fdb_flush ]\n"
+			"			[ state STATE ]\n"
+			"			[ priority PRIO ]\n"
+			"			[ cost COST ]\n"
+			"			[ guard {on | off} ]\n"
+			"			[ hairpin {on | off} ]\n"
+			"			[ fastleave {on | off} ]\n"
+			"			[ root_block {on | off} ]\n"
+			"			[ learning {on | off} ]\n"
+			"			[ flood {on | off} ]\n");
+
+	if (get_arp_probe())
+		fprintf(stderr, "			[ sink_connected {on | off} ]\n");
+
+	fprintf(stderr,
+			"			[ proxy_arp {on | off} ]\n"
+			"			[ proxy_arp_wifi {on | off} ]\n"
+			"			[ mcast_router MULTICAST_ROUTER ]\n"
+			"			[ mcast_fast_leave {on | off} ]\n"
+			"			[ mcast_flood {on | off} ]\n"
+			"			[ bcast_flood {on | off} ]\n"
+			"			[ mcast_to_unicast {on | off} ]\n"
+			"			[ group_fwd_mask MASK ]\n"
+			"			[ neigh_suppress {on | off} ]\n"
+			"			[ vlan_tunnel {on | off} ]\n"
+			"			[ isolated {on | off} ]\n"
+			"			[ locked {on | off} ]\n"
+			"			[ backup_port DEVICE ] [ nobackup_port ]\n");
 }
 
 static void explain(void)
@@ -162,9 +167,13 @@ static void bridge_slave_print_opt(struct link_util *lu, FILE *f,
 		print_on_off(PRINT_ANY, "flood", "flood %s ",
 			     rta_getattr_u8(tb[IFLA_BRPORT_UNICAST_FLOOD]));
 
+	if (get_arp_probe() && tb[IFLA_BRPORT_SINK_CONNECTED])
+		print_on_off(PRINT_ANY, "sink_connected", "sink_connected %s",
+				rta_getattr_u8(tb[IFLA_BRPORT_SINK_CONNECTED]));
+
 	if (tb[IFLA_BRPORT_ID])
 		print_0xhex(PRINT_ANY, "id", "port_id %#llx ",
-			    rta_getattr_u16(tb[IFLA_BRPORT_ID]));
+				rta_getattr_u16(tb[IFLA_BRPORT_ID]));
 
 	if (tb[IFLA_BRPORT_NO])
 		print_0xhex(PRINT_ANY, "no", "port_no %#llx ",
@@ -424,9 +433,13 @@ static int bridge_slave_parse_opt(struct link_util *lu, int argc, char **argv,
 		} else if (matches(*argv, "help") == 0) {
 			explain();
 			return -1;
+		} else if (get_arp_probe() && matches(*argv, "sink_connected") == 0) {
+			NEXT_ARG();
+			bridge_slave_parse_on_off("sink_connected", *argv, n,
+					IFLA_BRPORT_SINK_CONNECTED);
 		} else {
 			fprintf(stderr, "bridge_slave: unknown option \"%s\"?\n",
-				*argv);
+					*argv);
 			explain();
 			return -1;
 		}
-- 
2.37.3


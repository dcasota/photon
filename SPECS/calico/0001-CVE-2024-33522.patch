From d58e126ebf1fc08dd7504789c49ed13d7756e2e3 Mon Sep 17 00:00:00 2001
From: Pedro Coutinho <pedro@tigera.io>
Date: Wed, 24 Jan 2024 20:17:10 -0800
Subject: [PATCH] Improvements to cni-plugin binaries

[Brennan: Ported to 3.26.x]
---
 cni-plugin/Makefile               | 19 ++++---
 cni-plugin/cmd/calico/calico.go   |  8 ---
 cni-plugin/cmd/install/install.go | 32 +++++++++++
 cni-plugin/pkg/install/install.go | 89 ++++++++++++++-----------------
 4 files changed, 86 insertions(+), 62 deletions(-)
 create mode 100644 cni-plugin/cmd/install/install.go

diff --git a/cni-plugin/Makefile b/cni-plugin/Makefile
index 08d022d..92fbca6 100644
--- a/cni-plugin/Makefile
+++ b/cni-plugin/Makefile
@@ -87,13 +87,20 @@ build-all: $(addprefix sub-build-,$(VALIDARCHES))
 sub-build-%:
 	$(MAKE) build ARCH=$*

-## Build the Calico network plugin and ipam plugins
+## Build the Calico installation binary for the network and ipam plugins
 $(BIN)/install binary: $(SRC_FILES)
 ifeq ($(FIPS), true)
-	$(call build_cgo_boring_binary, $(PACKAGE_NAME)/cmd/calico, $(BIN)/install)
+    $(call build_cgo_boring_binary, $(PACKAGE_NAME)/cmd/install, $@)
 else
-	$(DOCKER_RUN) -e CGO_ENABLED=$(CGO_ENABLED) $(CALICO_BUILD) sh -c '\
-		$(GIT_CONFIG_SSH) go build -buildvcs=false -v -o $(BIN)/install -ldflags "$(LDFLAGS)" $(PACKAGE_NAME)/cmd/calico'
+    $(call build_binary, $(PACKAGE_NAME)/cmd/install, $@)
+endif
+
+## Build the Calico network and ipam plugins
+$(BIN)/calico: $(SRC_FILES)
+ifeq ($(FIPS), true)
+	$(call build_cgo_boring_binary, $(PACKAGE_NAME)/cmd/calico, $@)
+else
+	$(call build_binary, $(PACKAGE_NAME)/cmd/calico, $@)
 endif

 ## Build the Calico network plugin and ipam plugins for Windows
diff --git a/cni-plugin/cmd/calico/calico.go b/cni-plugin/cmd/calico/calico.go
index 091c080..4b88375 100644
--- a/cni-plugin/cmd/calico/calico.go
+++ b/cni-plugin/cmd/calico/calico.go
@@ -18,9 +18,6 @@ import (
 	"os"
 	"path/filepath"

-	"github.com/sirupsen/logrus"
-
-	"github.com/projectcalico/calico/cni-plugin/pkg/install"
 	"github.com/projectcalico/calico/cni-plugin/pkg/ipamplugin"
 	"github.com/projectcalico/calico/cni-plugin/pkg/plugin"
 )
@@ -36,11 +33,6 @@ func main() {
 		plugin.Main(VERSION)
 	case "calico-ipam", "calico-ipam.exe":
 		ipamplugin.Main(VERSION)
-	case "install":
-		err := install.Install()
-		if err != nil {
-			logrus.WithError(err).Fatal("Error installing CNI plugin")
-		}
 	default:
 		panic("Unknown binary name: " + filename)
 	}
diff --git a/cni-plugin/cmd/install/install.go b/cni-plugin/cmd/install/install.go
new file mode 100644
index 0000000..1ac30ed
--- /dev/null
+++ b/cni-plugin/cmd/install/install.go
@@ -0,0 +1,32 @@
+// Copyright (c) 2023 Tigera, Inc. All rights reserved.
+
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package main
+
+import (
+	"github.com/sirupsen/logrus"
+
+	"github.com/projectcalico/calico/cni-plugin/pkg/install"
+)
+
+// VERSION is filled out during the build process (using git describe output)
+var VERSION string
+
+func main() {
+	err := install.Install()
+	if err != nil {
+		logrus.WithError(err).Fatal("Error installing CNI plugin")
+	}
+}
+
diff --git a/cni-plugin/pkg/install/install.go b/cni-plugin/pkg/install/install.go
index 31fe35a..8d4dc01 100644
--- a/cni-plugin/pkg/install/install.go
+++ b/cni-plugin/pkg/install/install.go
@@ -159,34 +159,27 @@ func Install() error {
 	// Copy over any TLS assets from the SECRETS_MOUNT_DIR to the host.
 	// First check if the dir exists and has anything in it.
 	if directoryExists(c.TLSAssetsDir) {
-		logrus.Info("Installing any TLS assets")
-		mkdir("/host/etc/cni/net.d/calico-tls")
-		if err := copyFileAndPermissions(fmt.Sprintf("%s/%s", c.TLSAssetsDir, "etcd-ca"), "/host/etc/cni/net.d/calico-tls/etcd-ca"); err != nil {
-			logrus.Warnf("Missing etcd-ca")
-		}
-		if err := copyFileAndPermissions(fmt.Sprintf("%s/%s", c.TLSAssetsDir, "etcd-cert"), "/host/etc/cni/net.d/calico-tls/etcd-cert"); err != nil {
-			logrus.Warnf("Missing etcd-cert")
-		}
-		if err := copyFileAndPermissions(fmt.Sprintf("%s/%s", c.TLSAssetsDir, "etcd-key"), "/host/etc/cni/net.d/calico-tls/etcd-key"); err != nil {
-			logrus.Warnf("Missing etcd-key")
+		// Only install TLS assets if at least one of them exists in the dir.
+		etcdCaPath := fmt.Sprintf("%s/%s", c.TLSAssetsDir, "etcd-ca")
+		etcdCertPath := fmt.Sprintf("%s/%s", c.TLSAssetsDir, "etcd-cert")
+		etcdKeyPath := fmt.Sprintf("%s/%s", c.TLSAssetsDir, "etcd-key")
+		if !fileExists(etcdCaPath) && !fileExists(etcdCertPath) && !fileExists(etcdKeyPath) {
+			logrus.Infof("No TLS assets found in %s, skipping", c.TLSAssetsDir)
+		} else {
+			logrus.Info("Installing any TLS assets")
+			mkdir(winutils.GetHostPath("/host/etc/cni/net.d/calico-tls"))
+			if err := copyFileAndPermissions(etcdCaPath, winutils.GetHostPath("/host/etc/cni/net.d/calico-tls/etcd-ca")); err != nil {
+				logrus.Warnf("Missing etcd-ca")
+			}
+			if err := copyFileAndPermissions(etcdCertPath, winutils.GetHostPath("/host/etc/cni/net.d/calico-tls/etcd-cert")); err != nil {
+				logrus.Warnf("Missing etcd-cert")
+			}
+			if err := copyFileAndPermissions(etcdKeyPath, winutils.GetHostPath("/host/etc/cni/net.d/calico-tls/etcd-key")); err != nil {
+				logrus.Warnf("Missing etcd-key")
+			}
 		}
 	}

-	// Set the suid bit on the binaries to allow them to run as non-root users.
-	if err := setSuidBit("/opt/cni/bin/install"); err != nil {
-		logrus.WithError(err).Fatalf("Failed to set the suid bit on the install binary")
-	}
-
-	// TODO: Remove the setSUID code here on calico and calico-ipam when they eventually
-	// get refactored to all use install as the source.
-	if err := setSuidBit("/opt/cni/bin/calico"); err != nil {
-		logrus.WithError(err).Fatalf("Failed to set the suid bit on the calico binary")
-	}
-
-	if err := setSuidBit("/opt/cni/bin/calico-ipam"); err != nil {
-		logrus.WithError(err).Fatalf("Failed to set the suid bit on the calico-ipam")
-	}
-
 	// Place the new binaries if the directory is writeable.
 	dirs := []string{"/host/opt/cni/bin", "/host/secondary-bin-dir"}
 	binsWritten := false
@@ -196,6 +189,9 @@ func Install() error {
 			continue
 		}

+		// Don't exec the 'calico' binary later on if it has been skipped
+		calicoBinarySkipped := true
+
 		// Iterate through each binary we might want to install.
 		files, err := os.ReadDir("/opt/cni/bin/")
 		if err != nil {
@@ -204,6 +200,10 @@ func Install() error {
 		for _, binary := range files {
 			target := fmt.Sprintf("%s/%s", d, binary.Name())
 			source := fmt.Sprintf("/opt/cni/bin/%s", binary.Name())
+			// Skip the 'install' binary as it is not needed on the host
+			if binary.Name() == "install" || binary.Name() == "install.exe" {
+				continue
+			}
 			if c.skipBinary(binary.Name()) {
 				continue
 			}
@@ -215,6 +215,9 @@ func Install() error {
 				logrus.WithError(err).Errorf("Failed to install %s", target)
 				os.Exit(1)
 			}
+			if binary.Name() == "calico" || binary.Name() == "calico.exe" {
+				calicoBinarySkipped = false
+			}
 			logrus.Infof("Installed %s", target)
 		}

@@ -222,17 +225,20 @@ func Install() error {
 		logrus.Infof("Wrote Calico CNI binaries to %s\n", d)
 		binsWritten = true

-		// Print CNI plugin version to confirm that the binary was actually written.
-		// If this fails, it means something has gone wrong so we should retry.
-		cmd := exec.Command(d+"/calico", "-v")
-		var out bytes.Buffer
-		cmd.Stdout = &out
-		err = cmd.Run()
-		if err != nil {
-			logrus.WithError(err).Warnf("Failed getting CNI plugin version from installed binary, exiting")
-			return err
+		// Don't exec the 'calico' binary later on if it has been skipped
+		if !calicoBinarySkipped {
+			// Print CNI plugin version to confirm that the binary was actually written.
+			// If this fails, it means something has gone wrong so we should retry.
+			cmd := exec.Command(d+"/calico", "-v")
+			var out bytes.Buffer
+			cmd.Stdout = &out
+			err = cmd.Run()
+			if err != nil {
+				logrus.WithError(err).Warnf("Failed getting CNI plugin version from installed binary, exiting")
+				return err
+			}
+			logrus.Infof("CNI plugin version: %s", out.String())
 		}
-		logrus.Infof("CNI plugin version: %s", out.String())
 	}

 	// If binaries were not placed, exit
@@ -507,19 +513,6 @@ current-context: calico-context`
 	}
 }

-func setSuidBit(file string) error {
-	fi, err := os.Stat(file)
-	if err != nil {
-		return fmt.Errorf("failed to stat file: %s", err)
-	}
-	err = os.Chmod(file, fi.Mode()|os.FileMode(uint32(8388608)))
-	if err != nil {
-		return fmt.Errorf("failed to chmod file: %s", err)
-	}
-
-	return nil
-}
-
 // destinationUptoDate compares the given files and returns
 // whether or not the destination file needs to be updated with the
 // contents of the source file.
--
2.39.0


From 43378268c1b08eabfbcc876daa35259e59e11189 Mon Sep 17 00:00:00 2001
From: Brendan Gregg <brendan@intel.com>
Date: Wed, 25 Dec 2024 21:00:11 +0000
Subject: [PATCH] clang: check header ownership (#4928)

Example testing with a brendan-owned /tmp/kheaders file (note the "ERROR:" message):

~/bcc/build$ sudo /usr/share/bcc/tools/biosnoop
ERROR: header file ownership unexpected: /tmp/kheaders-5.15.47-internal
<built-in>:1:10: fatal error: './include/linux/kconfig.h' file not found
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.
Traceback (most recent call last):
  File "/usr/share/bcc/tools/biosnoop", line 335, in <module>
    b = BPF(text=bpf_text)
  File "/usr/lib/python3/dist-packages/bcc-0.1.5+6cd27218-py3.10.egg/bcc/__init__.py", line 479, in __init__
Exception: Failed to compile BPF module <text>
~/bcc/build$ ls -lhd /tmp/kheaders-5.15.47-internal
drwxrwxr-x 2 brendan dev 4.0K Mar  6 02:50 /tmp/kheaders-5.15.47-internal

No error when chown'd back to root.
[Guru: Patch is regenerated to 0.25.0 version]
Signed-off-by: Guruswamy Basavaiah <guruswamy.basavaiah@broadcom.com>
---
 src/cc/frontends/clang/kbuild_helper.cc | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/src/cc/frontends/clang/kbuild_helper.cc b/src/cc/frontends/clang/kbuild_helper.cc
index 933aec8..1b29146 100644
--- a/src/cc/frontends/clang/kbuild_helper.cc
+++ b/src/cc/frontends/clang/kbuild_helper.cc
@@ -140,15 +140,22 @@ int KBuildHelper::get_flags(const char *uname_machine, vector<string> *cflags) {
   return 0;
 }
 
-static inline int file_exists(const char *f)
+static inline int file_exists_and_ownedby(const char *f, uid_t uid)
 {
   struct stat buffer;
-  return (stat(f, &buffer) == 0);
+  int ret;
+  if ((ret = stat(f, &buffer)) == 0) {
+    if (buffer.st_uid != uid) {
+      std::cout << "ERROR: header file ownership unexpected: " << std::string(f) << "\n";
+      return -1;
+    }
+  }
+  return ret;
 }
 
 static inline int proc_kheaders_exists(void)
 {
-  return file_exists(PROC_KHEADERS_PATH);
+  return file_exists_and_ownedby(PROC_KHEADERS_PATH, 0);
 }
 
 static inline int extract_kheaders(const std::string &dirpath,
@@ -214,7 +221,7 @@ int get_proc_kheaders(std::string &dirpath)
   snprintf(dirpath_tmp, 256, "/tmp/kheaders-%s", uname_data.release);
   dirpath = std::string(dirpath_tmp);
 
-  if (file_exists(dirpath_tmp))
+  if (file_exists_and_ownedby(dirpath_tmp, 0))
     return 0;
 
   // First time so extract it
-- 
2.39.4

